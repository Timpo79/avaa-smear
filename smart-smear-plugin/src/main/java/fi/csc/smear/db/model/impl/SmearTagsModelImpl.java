package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import fi.csc.smear.db.model.SmearTags;
import fi.csc.smear.db.model.SmearTagsModel;
import fi.csc.smear.db.model.SmearTagsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SmearTags service. Represents a row in the &quot;Tags&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.SmearTagsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SmearTagsImpl}.
 * </p>
 *
 * @author pj
 * @see SmearTagsImpl
 * @see fi.csc.smear.db.model.SmearTags
 * @see fi.csc.smear.db.model.SmearTagsModel
 * @generated
 */
@JSON(strict = true)
public class SmearTagsModelImpl extends BaseModelImpl<SmearTags>
    implements SmearTagsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a smear tags model instance should use the {@link fi.csc.smear.db.model.SmearTags} interface instead.
     */
    public static final String TABLE_NAME = "Tags";
    public static final Object[][] TABLE_COLUMNS = {
            { "tagID", Types.BIGINT },
            { "vocabulary", Types.VARCHAR },
            { "tag", Types.VARCHAR },
            { "displaykeyword", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Tags (tagID LONG not null primary key,vocabulary VARCHAR(75) null,tag VARCHAR(75) null,displaykeyword VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Tags";
    public static final String ORDER_BY_JPQL = " ORDER BY smearTags.tagID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Tags.tagID ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.SmearTags"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.SmearTags"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.SmearTags"));
    private static ClassLoader _classLoader = SmearTags.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SmearTags.class
        };
    private long _tagID;
    private String _vocabulary;
    private String _tag;
    private String _displaykeyword;
    private SmearTags _escapedModel;

    public SmearTagsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SmearTags toModel(SmearTagsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SmearTags model = new SmearTagsImpl();

        model.setTagID(soapModel.getTagID());
        model.setVocabulary(soapModel.getVocabulary());
        model.setTag(soapModel.getTag());
        model.setDisplaykeyword(soapModel.getDisplaykeyword());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SmearTags> toModels(SmearTagsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SmearTags> models = new ArrayList<SmearTags>(soapModels.length);

        for (SmearTagsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _tagID;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTagID(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _tagID;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SmearTags.class;
    }

    @Override
    public String getModelClassName() {
        return SmearTags.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("tagID", getTagID());
        attributes.put("vocabulary", getVocabulary());
        attributes.put("tag", getTag());
        attributes.put("displaykeyword", getDisplaykeyword());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long tagID = (Long) attributes.get("tagID");

        if (tagID != null) {
            setTagID(tagID);
        }

        String vocabulary = (String) attributes.get("vocabulary");

        if (vocabulary != null) {
            setVocabulary(vocabulary);
        }

        String tag = (String) attributes.get("tag");

        if (tag != null) {
            setTag(tag);
        }

        String displaykeyword = (String) attributes.get("displaykeyword");

        if (displaykeyword != null) {
            setDisplaykeyword(displaykeyword);
        }
    }

    @JSON
    @Override
    public long getTagID() {
        return _tagID;
    }

    @Override
    public void setTagID(long tagID) {
        _tagID = tagID;
    }

    @JSON
    @Override
    public String getVocabulary() {
        if (_vocabulary == null) {
            return StringPool.BLANK;
        } else {
            return _vocabulary;
        }
    }

    @Override
    public void setVocabulary(String vocabulary) {
        _vocabulary = vocabulary;
    }

    @JSON
    @Override
    public String getTag() {
        if (_tag == null) {
            return StringPool.BLANK;
        } else {
            return _tag;
        }
    }

    @Override
    public void setTag(String tag) {
        _tag = tag;
    }

    @JSON
    @Override
    public String getDisplaykeyword() {
        if (_displaykeyword == null) {
            return StringPool.BLANK;
        } else {
            return _displaykeyword;
        }
    }

    @Override
    public void setDisplaykeyword(String displaykeyword) {
        _displaykeyword = displaykeyword;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SmearTags.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SmearTags toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SmearTags) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SmearTagsImpl smearTagsImpl = new SmearTagsImpl();

        smearTagsImpl.setTagID(getTagID());
        smearTagsImpl.setVocabulary(getVocabulary());
        smearTagsImpl.setTag(getTag());
        smearTagsImpl.setDisplaykeyword(getDisplaykeyword());

        smearTagsImpl.resetOriginalValues();

        return smearTagsImpl;
    }

    @Override
    public int compareTo(SmearTags smearTags) {
        long primaryKey = smearTags.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SmearTags)) {
            return false;
        }

        SmearTags smearTags = (SmearTags) obj;

        long primaryKey = smearTags.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SmearTags> toCacheModel() {
        SmearTagsCacheModel smearTagsCacheModel = new SmearTagsCacheModel();

        smearTagsCacheModel.tagID = getTagID();

        smearTagsCacheModel.vocabulary = getVocabulary();

        String vocabulary = smearTagsCacheModel.vocabulary;

        if ((vocabulary != null) && (vocabulary.length() == 0)) {
            smearTagsCacheModel.vocabulary = null;
        }

        smearTagsCacheModel.tag = getTag();

        String tag = smearTagsCacheModel.tag;

        if ((tag != null) && (tag.length() == 0)) {
            smearTagsCacheModel.tag = null;
        }

        smearTagsCacheModel.displaykeyword = getDisplaykeyword();

        String displaykeyword = smearTagsCacheModel.displaykeyword;

        if ((displaykeyword != null) && (displaykeyword.length() == 0)) {
            smearTagsCacheModel.displaykeyword = null;
        }

        return smearTagsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{tagID=");
        sb.append(getTagID());
        sb.append(", vocabulary=");
        sb.append(getVocabulary());
        sb.append(", tag=");
        sb.append(getTag());
        sb.append(", displaykeyword=");
        sb.append(getDisplaykeyword());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.SmearTags");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>tagID</column-name><column-value><![CDATA[");
        sb.append(getTagID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vocabulary</column-name><column-value><![CDATA[");
        sb.append(getVocabulary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tag</column-name><column-value><![CDATA[");
        sb.append(getTag());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displaykeyword</column-name><column-value><![CDATA[");
        sb.append(getDisplaykeyword());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
