package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import fi.csc.smear.db.model.SmearvariableTags;
import fi.csc.smear.db.model.SmearvariableTagsModel;
import fi.csc.smear.db.model.SmearvariableTagsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SmearvariableTags service. Represents a row in the &quot;variableTags&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.SmearvariableTagsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SmearvariableTagsImpl}.
 * </p>
 *
 * @author pj
 * @see SmearvariableTagsImpl
 * @see fi.csc.smear.db.model.SmearvariableTags
 * @see fi.csc.smear.db.model.SmearvariableTagsModel
 * @generated
 */
@JSON(strict = true)
public class SmearvariableTagsModelImpl extends BaseModelImpl<SmearvariableTags>
    implements SmearvariableTagsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a smearvariable tags model instance should use the {@link fi.csc.smear.db.model.SmearvariableTags} interface instead.
     */
    public static final String TABLE_NAME = "variableTags";
    public static final Object[][] TABLE_COLUMNS = {
            { "tagID", Types.BIGINT },
            { "variableID", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table variableTags (tagID LONG,variableID LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table variableTags";
    public static final String ORDER_BY_JPQL = " ORDER BY smearvariableTags.variableID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY variableTags.variableID ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.SmearvariableTags"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.SmearvariableTags"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.SmearvariableTags"));
    private static ClassLoader _classLoader = SmearvariableTags.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SmearvariableTags.class
        };
    private long _tagID;
    private long _variableID;
    private SmearvariableTags _escapedModel;

    public SmearvariableTagsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SmearvariableTags toModel(SmearvariableTagsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SmearvariableTags model = new SmearvariableTagsImpl();

        model.setTagID(soapModel.getTagID());
        model.setVariableID(soapModel.getVariableID());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SmearvariableTags> toModels(
        SmearvariableTagsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SmearvariableTags> models = new ArrayList<SmearvariableTags>(soapModels.length);

        for (SmearvariableTagsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _variableID;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setVariableID(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _variableID;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SmearvariableTags.class;
    }

    @Override
    public String getModelClassName() {
        return SmearvariableTags.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("tagID", getTagID());
        attributes.put("variableID", getVariableID());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long tagID = (Long) attributes.get("tagID");

        if (tagID != null) {
            setTagID(tagID);
        }

        Long variableID = (Long) attributes.get("variableID");

        if (variableID != null) {
            setVariableID(variableID);
        }
    }

    @JSON
    @Override
    public long getTagID() {
        return _tagID;
    }

    @Override
    public void setTagID(long tagID) {
        _tagID = tagID;
    }

    @JSON
    @Override
    public long getVariableID() {
        return _variableID;
    }

    @Override
    public void setVariableID(long variableID) {
        _variableID = variableID;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SmearvariableTags.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SmearvariableTags toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SmearvariableTags) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SmearvariableTagsImpl smearvariableTagsImpl = new SmearvariableTagsImpl();

        smearvariableTagsImpl.setTagID(getTagID());
        smearvariableTagsImpl.setVariableID(getVariableID());

        smearvariableTagsImpl.resetOriginalValues();

        return smearvariableTagsImpl;
    }

    @Override
    public int compareTo(SmearvariableTags smearvariableTags) {
        long primaryKey = smearvariableTags.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SmearvariableTags)) {
            return false;
        }

        SmearvariableTags smearvariableTags = (SmearvariableTags) obj;

        long primaryKey = smearvariableTags.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SmearvariableTags> toCacheModel() {
        SmearvariableTagsCacheModel smearvariableTagsCacheModel = new SmearvariableTagsCacheModel();

        smearvariableTagsCacheModel.tagID = getTagID();

        smearvariableTagsCacheModel.variableID = getVariableID();

        return smearvariableTagsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{tagID=");
        sb.append(getTagID());
        sb.append(", variableID=");
        sb.append(getVariableID());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.SmearvariableTags");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>tagID</column-name><column-value><![CDATA[");
        sb.append(getTagID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>variableID</column-name><column-value><![CDATA[");
        sb.append(getVariableID());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
