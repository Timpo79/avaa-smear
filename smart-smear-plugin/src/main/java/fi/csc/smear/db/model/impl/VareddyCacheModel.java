package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;

import fi.csc.smear.db.model.Vareddy;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import java.util.Date;

/**
 * The cache model class for representing Vareddy in entity cache.
 *
 * @author pj
 * @see Vareddy
 * @generated
 */
public class VareddyCacheModel implements CacheModel<Vareddy>, Externalizable {
    public long samptime;
    public float H;
    public int H_EMEP;
    public float LE;
    public int LE_EMEP;
    public float E;
    public int E_EMEP;
    public float F_c;
    public int F_c_EMEP;
    public float tau;
    public int tau_EMEP;
    public float u_star;
    public int u_star_EMEP;
    public float MO_length;
    public int MO_length_EMEP;
    public float std_u;
    public int std_u_EMEP;
    public float std_v;
    public int std_v_EMEP;
    public float std_w;
    public int std_w_EMEP;
    public float std_t;
    public int std_t_EMEP;
    public float std_c;
    public int std_c_EMEP;
    public float std_h;
    public int std_h_EMEP;
    public float av_u;
    public int av_u_EMEP;
    public float av_v;
    public int av_v_EMEP;
    public float av_w;
    public int av_w_EMEP;
    public float av_t;
    public int av_t_EMEP;
    public float av_c;
    public int av_c_EMEP;
    public float av_h;
    public int av_h_EMEP;
    public float U;
    public int U_EMEP;
    public float wind_dir;
    public int wind_dir_EMEP;
    public float c_lag;
    public int c_lag_EMEP;
    public float h_lag;
    public int h_lag_EMEP;
    public float licor_t_std;
    public int licor_t_std_EMEP;
    public float licor_t_av;
    public int licor_t_av_EMEP;
    public float licor_p_std;
    public int licor_p_std_EMEP;
    public float licor_p_av;
    public int licor_p_av_EMEP;
    public float H_sub;
    public int H_sub_EMEP;
    public float LE_sub;
    public int LE_sub_EMEP;
    public float E_sub;
    public int E_sub_EMEP;
    public float F_c_sub;
    public int F_c_sub_EMEP;
    public float tau_sub;
    public int tau_sub_EMEP;
    public float u_star_sub;
    public int u_star_sub_EMEP;
    public float MO_length_sub;
    public int MO_length_sub_EMEP;
    public float std_u_sub;
    public int std_u_sub_EMEP;
    public float std_v_sub;
    public int std_v_sub_EMEP;
    public float std_w_sub;
    public int std_w_sub_EMEP;
    public float std_t_sub;
    public int std_t_sub_EMEP;
    public float std_c_sub;
    public int std_c_sub_EMEP;
    public float std_h_sub;
    public int std_h_sub_EMEP;
    public float av_u_sub;
    public int av_u_sub_EMEP;
    public float av_v_sub;
    public int av_v_sub_EMEP;
    public float av_w_sub;
    public int av_w_sub_EMEP;
    public float av_t_sub;
    public int av_t_sub_EMEP;
    public float av_c_sub;
    public int av_c_sub_EMEP;
    public float av_h_sub;
    public int av_h_sub_EMEP;
    public float U_sub;
    public int U_sub_EMEP;
    public float wind_dir_sub;
    public int wind_dir_sub_EMEP;

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(195);

        sb.append("{samptime=");
        sb.append(samptime);
        sb.append(", H=");
        sb.append(H);
        sb.append(", H_EMEP=");
        sb.append(H_EMEP);
        sb.append(", LE=");
        sb.append(LE);
        sb.append(", LE_EMEP=");
        sb.append(LE_EMEP);
        sb.append(", E=");
        sb.append(E);
        sb.append(", E_EMEP=");
        sb.append(E_EMEP);
        sb.append(", F_c=");
        sb.append(F_c);
        sb.append(", F_c_EMEP=");
        sb.append(F_c_EMEP);
        sb.append(", tau=");
        sb.append(tau);
        sb.append(", tau_EMEP=");
        sb.append(tau_EMEP);
        sb.append(", u_star=");
        sb.append(u_star);
        sb.append(", u_star_EMEP=");
        sb.append(u_star_EMEP);
        sb.append(", MO_length=");
        sb.append(MO_length);
        sb.append(", MO_length_EMEP=");
        sb.append(MO_length_EMEP);
        sb.append(", std_u=");
        sb.append(std_u);
        sb.append(", std_u_EMEP=");
        sb.append(std_u_EMEP);
        sb.append(", std_v=");
        sb.append(std_v);
        sb.append(", std_v_EMEP=");
        sb.append(std_v_EMEP);
        sb.append(", std_w=");
        sb.append(std_w);
        sb.append(", std_w_EMEP=");
        sb.append(std_w_EMEP);
        sb.append(", std_t=");
        sb.append(std_t);
        sb.append(", std_t_EMEP=");
        sb.append(std_t_EMEP);
        sb.append(", std_c=");
        sb.append(std_c);
        sb.append(", std_c_EMEP=");
        sb.append(std_c_EMEP);
        sb.append(", std_h=");
        sb.append(std_h);
        sb.append(", std_h_EMEP=");
        sb.append(std_h_EMEP);
        sb.append(", av_u=");
        sb.append(av_u);
        sb.append(", av_u_EMEP=");
        sb.append(av_u_EMEP);
        sb.append(", av_v=");
        sb.append(av_v);
        sb.append(", av_v_EMEP=");
        sb.append(av_v_EMEP);
        sb.append(", av_w=");
        sb.append(av_w);
        sb.append(", av_w_EMEP=");
        sb.append(av_w_EMEP);
        sb.append(", av_t=");
        sb.append(av_t);
        sb.append(", av_t_EMEP=");
        sb.append(av_t_EMEP);
        sb.append(", av_c=");
        sb.append(av_c);
        sb.append(", av_c_EMEP=");
        sb.append(av_c_EMEP);
        sb.append(", av_h=");
        sb.append(av_h);
        sb.append(", av_h_EMEP=");
        sb.append(av_h_EMEP);
        sb.append(", U=");
        sb.append(U);
        sb.append(", U_EMEP=");
        sb.append(U_EMEP);
        sb.append(", wind_dir=");
        sb.append(wind_dir);
        sb.append(", wind_dir_EMEP=");
        sb.append(wind_dir_EMEP);
        sb.append(", c_lag=");
        sb.append(c_lag);
        sb.append(", c_lag_EMEP=");
        sb.append(c_lag_EMEP);
        sb.append(", h_lag=");
        sb.append(h_lag);
        sb.append(", h_lag_EMEP=");
        sb.append(h_lag_EMEP);
        sb.append(", licor_t_std=");
        sb.append(licor_t_std);
        sb.append(", licor_t_std_EMEP=");
        sb.append(licor_t_std_EMEP);
        sb.append(", licor_t_av=");
        sb.append(licor_t_av);
        sb.append(", licor_t_av_EMEP=");
        sb.append(licor_t_av_EMEP);
        sb.append(", licor_p_std=");
        sb.append(licor_p_std);
        sb.append(", licor_p_std_EMEP=");
        sb.append(licor_p_std_EMEP);
        sb.append(", licor_p_av=");
        sb.append(licor_p_av);
        sb.append(", licor_p_av_EMEP=");
        sb.append(licor_p_av_EMEP);
        sb.append(", H_sub=");
        sb.append(H_sub);
        sb.append(", H_sub_EMEP=");
        sb.append(H_sub_EMEP);
        sb.append(", LE_sub=");
        sb.append(LE_sub);
        sb.append(", LE_sub_EMEP=");
        sb.append(LE_sub_EMEP);
        sb.append(", E_sub=");
        sb.append(E_sub);
        sb.append(", E_sub_EMEP=");
        sb.append(E_sub_EMEP);
        sb.append(", F_c_sub=");
        sb.append(F_c_sub);
        sb.append(", F_c_sub_EMEP=");
        sb.append(F_c_sub_EMEP);
        sb.append(", tau_sub=");
        sb.append(tau_sub);
        sb.append(", tau_sub_EMEP=");
        sb.append(tau_sub_EMEP);
        sb.append(", u_star_sub=");
        sb.append(u_star_sub);
        sb.append(", u_star_sub_EMEP=");
        sb.append(u_star_sub_EMEP);
        sb.append(", MO_length_sub=");
        sb.append(MO_length_sub);
        sb.append(", MO_length_sub_EMEP=");
        sb.append(MO_length_sub_EMEP);
        sb.append(", std_u_sub=");
        sb.append(std_u_sub);
        sb.append(", std_u_sub_EMEP=");
        sb.append(std_u_sub_EMEP);
        sb.append(", std_v_sub=");
        sb.append(std_v_sub);
        sb.append(", std_v_sub_EMEP=");
        sb.append(std_v_sub_EMEP);
        sb.append(", std_w_sub=");
        sb.append(std_w_sub);
        sb.append(", std_w_sub_EMEP=");
        sb.append(std_w_sub_EMEP);
        sb.append(", std_t_sub=");
        sb.append(std_t_sub);
        sb.append(", std_t_sub_EMEP=");
        sb.append(std_t_sub_EMEP);
        sb.append(", std_c_sub=");
        sb.append(std_c_sub);
        sb.append(", std_c_sub_EMEP=");
        sb.append(std_c_sub_EMEP);
        sb.append(", std_h_sub=");
        sb.append(std_h_sub);
        sb.append(", std_h_sub_EMEP=");
        sb.append(std_h_sub_EMEP);
        sb.append(", av_u_sub=");
        sb.append(av_u_sub);
        sb.append(", av_u_sub_EMEP=");
        sb.append(av_u_sub_EMEP);
        sb.append(", av_v_sub=");
        sb.append(av_v_sub);
        sb.append(", av_v_sub_EMEP=");
        sb.append(av_v_sub_EMEP);
        sb.append(", av_w_sub=");
        sb.append(av_w_sub);
        sb.append(", av_w_sub_EMEP=");
        sb.append(av_w_sub_EMEP);
        sb.append(", av_t_sub=");
        sb.append(av_t_sub);
        sb.append(", av_t_sub_EMEP=");
        sb.append(av_t_sub_EMEP);
        sb.append(", av_c_sub=");
        sb.append(av_c_sub);
        sb.append(", av_c_sub_EMEP=");
        sb.append(av_c_sub_EMEP);
        sb.append(", av_h_sub=");
        sb.append(av_h_sub);
        sb.append(", av_h_sub_EMEP=");
        sb.append(av_h_sub_EMEP);
        sb.append(", U_sub=");
        sb.append(U_sub);
        sb.append(", U_sub_EMEP=");
        sb.append(U_sub_EMEP);
        sb.append(", wind_dir_sub=");
        sb.append(wind_dir_sub);
        sb.append(", wind_dir_sub_EMEP=");
        sb.append(wind_dir_sub_EMEP);
        sb.append("}");

        return sb.toString();
    }

    @Override
    public Vareddy toEntityModel() {
        VareddyImpl vareddyImpl = new VareddyImpl();

        if (samptime == Long.MIN_VALUE) {
            vareddyImpl.setSamptime(null);
        } else {
            vareddyImpl.setSamptime(new Date(samptime));
        }

        vareddyImpl.setH(H);
        vareddyImpl.setH_EMEP(H_EMEP);
        vareddyImpl.setLE(LE);
        vareddyImpl.setLE_EMEP(LE_EMEP);
        vareddyImpl.setE(E);
        vareddyImpl.setE_EMEP(E_EMEP);
        vareddyImpl.setF_c(F_c);
        vareddyImpl.setF_c_EMEP(F_c_EMEP);
        vareddyImpl.setTau(tau);
        vareddyImpl.setTau_EMEP(tau_EMEP);
        vareddyImpl.setU_star(u_star);
        vareddyImpl.setU_star_EMEP(u_star_EMEP);
        vareddyImpl.setMO_length(MO_length);
        vareddyImpl.setMO_length_EMEP(MO_length_EMEP);
        vareddyImpl.setStd_u(std_u);
        vareddyImpl.setStd_u_EMEP(std_u_EMEP);
        vareddyImpl.setStd_v(std_v);
        vareddyImpl.setStd_v_EMEP(std_v_EMEP);
        vareddyImpl.setStd_w(std_w);
        vareddyImpl.setStd_w_EMEP(std_w_EMEP);
        vareddyImpl.setStd_t(std_t);
        vareddyImpl.setStd_t_EMEP(std_t_EMEP);
        vareddyImpl.setStd_c(std_c);
        vareddyImpl.setStd_c_EMEP(std_c_EMEP);
        vareddyImpl.setStd_h(std_h);
        vareddyImpl.setStd_h_EMEP(std_h_EMEP);
        vareddyImpl.setAv_u(av_u);
        vareddyImpl.setAv_u_EMEP(av_u_EMEP);
        vareddyImpl.setAv_v(av_v);
        vareddyImpl.setAv_v_EMEP(av_v_EMEP);
        vareddyImpl.setAv_w(av_w);
        vareddyImpl.setAv_w_EMEP(av_w_EMEP);
        vareddyImpl.setAv_t(av_t);
        vareddyImpl.setAv_t_EMEP(av_t_EMEP);
        vareddyImpl.setAv_c(av_c);
        vareddyImpl.setAv_c_EMEP(av_c_EMEP);
        vareddyImpl.setAv_h(av_h);
        vareddyImpl.setAv_h_EMEP(av_h_EMEP);
        vareddyImpl.setU(U);
        vareddyImpl.setU_EMEP(U_EMEP);
        vareddyImpl.setWind_dir(wind_dir);
        vareddyImpl.setWind_dir_EMEP(wind_dir_EMEP);
        vareddyImpl.setC_lag(c_lag);
        vareddyImpl.setC_lag_EMEP(c_lag_EMEP);
        vareddyImpl.setH_lag(h_lag);
        vareddyImpl.setH_lag_EMEP(h_lag_EMEP);
        vareddyImpl.setLicor_t_std(licor_t_std);
        vareddyImpl.setLicor_t_std_EMEP(licor_t_std_EMEP);
        vareddyImpl.setLicor_t_av(licor_t_av);
        vareddyImpl.setLicor_t_av_EMEP(licor_t_av_EMEP);
        vareddyImpl.setLicor_p_std(licor_p_std);
        vareddyImpl.setLicor_p_std_EMEP(licor_p_std_EMEP);
        vareddyImpl.setLicor_p_av(licor_p_av);
        vareddyImpl.setLicor_p_av_EMEP(licor_p_av_EMEP);
        vareddyImpl.setH_sub(H_sub);
        vareddyImpl.setH_sub_EMEP(H_sub_EMEP);
        vareddyImpl.setLE_sub(LE_sub);
        vareddyImpl.setLE_sub_EMEP(LE_sub_EMEP);
        vareddyImpl.setE_sub(E_sub);
        vareddyImpl.setE_sub_EMEP(E_sub_EMEP);
        vareddyImpl.setF_c_sub(F_c_sub);
        vareddyImpl.setF_c_sub_EMEP(F_c_sub_EMEP);
        vareddyImpl.setTau_sub(tau_sub);
        vareddyImpl.setTau_sub_EMEP(tau_sub_EMEP);
        vareddyImpl.setU_star_sub(u_star_sub);
        vareddyImpl.setU_star_sub_EMEP(u_star_sub_EMEP);
        vareddyImpl.setMO_length_sub(MO_length_sub);
        vareddyImpl.setMO_length_sub_EMEP(MO_length_sub_EMEP);
        vareddyImpl.setStd_u_sub(std_u_sub);
        vareddyImpl.setStd_u_sub_EMEP(std_u_sub_EMEP);
        vareddyImpl.setStd_v_sub(std_v_sub);
        vareddyImpl.setStd_v_sub_EMEP(std_v_sub_EMEP);
        vareddyImpl.setStd_w_sub(std_w_sub);
        vareddyImpl.setStd_w_sub_EMEP(std_w_sub_EMEP);
        vareddyImpl.setStd_t_sub(std_t_sub);
        vareddyImpl.setStd_t_sub_EMEP(std_t_sub_EMEP);
        vareddyImpl.setStd_c_sub(std_c_sub);
        vareddyImpl.setStd_c_sub_EMEP(std_c_sub_EMEP);
        vareddyImpl.setStd_h_sub(std_h_sub);
        vareddyImpl.setStd_h_sub_EMEP(std_h_sub_EMEP);
        vareddyImpl.setAv_u_sub(av_u_sub);
        vareddyImpl.setAv_u_sub_EMEP(av_u_sub_EMEP);
        vareddyImpl.setAv_v_sub(av_v_sub);
        vareddyImpl.setAv_v_sub_EMEP(av_v_sub_EMEP);
        vareddyImpl.setAv_w_sub(av_w_sub);
        vareddyImpl.setAv_w_sub_EMEP(av_w_sub_EMEP);
        vareddyImpl.setAv_t_sub(av_t_sub);
        vareddyImpl.setAv_t_sub_EMEP(av_t_sub_EMEP);
        vareddyImpl.setAv_c_sub(av_c_sub);
        vareddyImpl.setAv_c_sub_EMEP(av_c_sub_EMEP);
        vareddyImpl.setAv_h_sub(av_h_sub);
        vareddyImpl.setAv_h_sub_EMEP(av_h_sub_EMEP);
        vareddyImpl.setU_sub(U_sub);
        vareddyImpl.setU_sub_EMEP(U_sub_EMEP);
        vareddyImpl.setWind_dir_sub(wind_dir_sub);
        vareddyImpl.setWind_dir_sub_EMEP(wind_dir_sub_EMEP);

        vareddyImpl.resetOriginalValues();

        return vareddyImpl;
    }

    @Override
    public void readExternal(ObjectInput objectInput) throws IOException {
        samptime = objectInput.readLong();
        H = objectInput.readFloat();
        H_EMEP = objectInput.readInt();
        LE = objectInput.readFloat();
        LE_EMEP = objectInput.readInt();
        E = objectInput.readFloat();
        E_EMEP = objectInput.readInt();
        F_c = objectInput.readFloat();
        F_c_EMEP = objectInput.readInt();
        tau = objectInput.readFloat();
        tau_EMEP = objectInput.readInt();
        u_star = objectInput.readFloat();
        u_star_EMEP = objectInput.readInt();
        MO_length = objectInput.readFloat();
        MO_length_EMEP = objectInput.readInt();
        std_u = objectInput.readFloat();
        std_u_EMEP = objectInput.readInt();
        std_v = objectInput.readFloat();
        std_v_EMEP = objectInput.readInt();
        std_w = objectInput.readFloat();
        std_w_EMEP = objectInput.readInt();
        std_t = objectInput.readFloat();
        std_t_EMEP = objectInput.readInt();
        std_c = objectInput.readFloat();
        std_c_EMEP = objectInput.readInt();
        std_h = objectInput.readFloat();
        std_h_EMEP = objectInput.readInt();
        av_u = objectInput.readFloat();
        av_u_EMEP = objectInput.readInt();
        av_v = objectInput.readFloat();
        av_v_EMEP = objectInput.readInt();
        av_w = objectInput.readFloat();
        av_w_EMEP = objectInput.readInt();
        av_t = objectInput.readFloat();
        av_t_EMEP = objectInput.readInt();
        av_c = objectInput.readFloat();
        av_c_EMEP = objectInput.readInt();
        av_h = objectInput.readFloat();
        av_h_EMEP = objectInput.readInt();
        U = objectInput.readFloat();
        U_EMEP = objectInput.readInt();
        wind_dir = objectInput.readFloat();
        wind_dir_EMEP = objectInput.readInt();
        c_lag = objectInput.readFloat();
        c_lag_EMEP = objectInput.readInt();
        h_lag = objectInput.readFloat();
        h_lag_EMEP = objectInput.readInt();
        licor_t_std = objectInput.readFloat();
        licor_t_std_EMEP = objectInput.readInt();
        licor_t_av = objectInput.readFloat();
        licor_t_av_EMEP = objectInput.readInt();
        licor_p_std = objectInput.readFloat();
        licor_p_std_EMEP = objectInput.readInt();
        licor_p_av = objectInput.readFloat();
        licor_p_av_EMEP = objectInput.readInt();
        H_sub = objectInput.readFloat();
        H_sub_EMEP = objectInput.readInt();
        LE_sub = objectInput.readFloat();
        LE_sub_EMEP = objectInput.readInt();
        E_sub = objectInput.readFloat();
        E_sub_EMEP = objectInput.readInt();
        F_c_sub = objectInput.readFloat();
        F_c_sub_EMEP = objectInput.readInt();
        tau_sub = objectInput.readFloat();
        tau_sub_EMEP = objectInput.readInt();
        u_star_sub = objectInput.readFloat();
        u_star_sub_EMEP = objectInput.readInt();
        MO_length_sub = objectInput.readFloat();
        MO_length_sub_EMEP = objectInput.readInt();
        std_u_sub = objectInput.readFloat();
        std_u_sub_EMEP = objectInput.readInt();
        std_v_sub = objectInput.readFloat();
        std_v_sub_EMEP = objectInput.readInt();
        std_w_sub = objectInput.readFloat();
        std_w_sub_EMEP = objectInput.readInt();
        std_t_sub = objectInput.readFloat();
        std_t_sub_EMEP = objectInput.readInt();
        std_c_sub = objectInput.readFloat();
        std_c_sub_EMEP = objectInput.readInt();
        std_h_sub = objectInput.readFloat();
        std_h_sub_EMEP = objectInput.readInt();
        av_u_sub = objectInput.readFloat();
        av_u_sub_EMEP = objectInput.readInt();
        av_v_sub = objectInput.readFloat();
        av_v_sub_EMEP = objectInput.readInt();
        av_w_sub = objectInput.readFloat();
        av_w_sub_EMEP = objectInput.readInt();
        av_t_sub = objectInput.readFloat();
        av_t_sub_EMEP = objectInput.readInt();
        av_c_sub = objectInput.readFloat();
        av_c_sub_EMEP = objectInput.readInt();
        av_h_sub = objectInput.readFloat();
        av_h_sub_EMEP = objectInput.readInt();
        U_sub = objectInput.readFloat();
        U_sub_EMEP = objectInput.readInt();
        wind_dir_sub = objectInput.readFloat();
        wind_dir_sub_EMEP = objectInput.readInt();
    }

    @Override
    public void writeExternal(ObjectOutput objectOutput)
        throws IOException {
        objectOutput.writeLong(samptime);
        objectOutput.writeFloat(H);
        objectOutput.writeInt(H_EMEP);
        objectOutput.writeFloat(LE);
        objectOutput.writeInt(LE_EMEP);
        objectOutput.writeFloat(E);
        objectOutput.writeInt(E_EMEP);
        objectOutput.writeFloat(F_c);
        objectOutput.writeInt(F_c_EMEP);
        objectOutput.writeFloat(tau);
        objectOutput.writeInt(tau_EMEP);
        objectOutput.writeFloat(u_star);
        objectOutput.writeInt(u_star_EMEP);
        objectOutput.writeFloat(MO_length);
        objectOutput.writeInt(MO_length_EMEP);
        objectOutput.writeFloat(std_u);
        objectOutput.writeInt(std_u_EMEP);
        objectOutput.writeFloat(std_v);
        objectOutput.writeInt(std_v_EMEP);
        objectOutput.writeFloat(std_w);
        objectOutput.writeInt(std_w_EMEP);
        objectOutput.writeFloat(std_t);
        objectOutput.writeInt(std_t_EMEP);
        objectOutput.writeFloat(std_c);
        objectOutput.writeInt(std_c_EMEP);
        objectOutput.writeFloat(std_h);
        objectOutput.writeInt(std_h_EMEP);
        objectOutput.writeFloat(av_u);
        objectOutput.writeInt(av_u_EMEP);
        objectOutput.writeFloat(av_v);
        objectOutput.writeInt(av_v_EMEP);
        objectOutput.writeFloat(av_w);
        objectOutput.writeInt(av_w_EMEP);
        objectOutput.writeFloat(av_t);
        objectOutput.writeInt(av_t_EMEP);
        objectOutput.writeFloat(av_c);
        objectOutput.writeInt(av_c_EMEP);
        objectOutput.writeFloat(av_h);
        objectOutput.writeInt(av_h_EMEP);
        objectOutput.writeFloat(U);
        objectOutput.writeInt(U_EMEP);
        objectOutput.writeFloat(wind_dir);
        objectOutput.writeInt(wind_dir_EMEP);
        objectOutput.writeFloat(c_lag);
        objectOutput.writeInt(c_lag_EMEP);
        objectOutput.writeFloat(h_lag);
        objectOutput.writeInt(h_lag_EMEP);
        objectOutput.writeFloat(licor_t_std);
        objectOutput.writeInt(licor_t_std_EMEP);
        objectOutput.writeFloat(licor_t_av);
        objectOutput.writeInt(licor_t_av_EMEP);
        objectOutput.writeFloat(licor_p_std);
        objectOutput.writeInt(licor_p_std_EMEP);
        objectOutput.writeFloat(licor_p_av);
        objectOutput.writeInt(licor_p_av_EMEP);
        objectOutput.writeFloat(H_sub);
        objectOutput.writeInt(H_sub_EMEP);
        objectOutput.writeFloat(LE_sub);
        objectOutput.writeInt(LE_sub_EMEP);
        objectOutput.writeFloat(E_sub);
        objectOutput.writeInt(E_sub_EMEP);
        objectOutput.writeFloat(F_c_sub);
        objectOutput.writeInt(F_c_sub_EMEP);
        objectOutput.writeFloat(tau_sub);
        objectOutput.writeInt(tau_sub_EMEP);
        objectOutput.writeFloat(u_star_sub);
        objectOutput.writeInt(u_star_sub_EMEP);
        objectOutput.writeFloat(MO_length_sub);
        objectOutput.writeInt(MO_length_sub_EMEP);
        objectOutput.writeFloat(std_u_sub);
        objectOutput.writeInt(std_u_sub_EMEP);
        objectOutput.writeFloat(std_v_sub);
        objectOutput.writeInt(std_v_sub_EMEP);
        objectOutput.writeFloat(std_w_sub);
        objectOutput.writeInt(std_w_sub_EMEP);
        objectOutput.writeFloat(std_t_sub);
        objectOutput.writeInt(std_t_sub_EMEP);
        objectOutput.writeFloat(std_c_sub);
        objectOutput.writeInt(std_c_sub_EMEP);
        objectOutput.writeFloat(std_h_sub);
        objectOutput.writeInt(std_h_sub_EMEP);
        objectOutput.writeFloat(av_u_sub);
        objectOutput.writeInt(av_u_sub_EMEP);
        objectOutput.writeFloat(av_v_sub);
        objectOutput.writeInt(av_v_sub_EMEP);
        objectOutput.writeFloat(av_w_sub);
        objectOutput.writeInt(av_w_sub_EMEP);
        objectOutput.writeFloat(av_t_sub);
        objectOutput.writeInt(av_t_sub_EMEP);
        objectOutput.writeFloat(av_c_sub);
        objectOutput.writeInt(av_c_sub_EMEP);
        objectOutput.writeFloat(av_h_sub);
        objectOutput.writeInt(av_h_sub_EMEP);
        objectOutput.writeFloat(U_sub);
        objectOutput.writeInt(U_sub_EMEP);
        objectOutput.writeFloat(wind_dir_sub);
        objectOutput.writeInt(wind_dir_sub_EMEP);
    }
}
