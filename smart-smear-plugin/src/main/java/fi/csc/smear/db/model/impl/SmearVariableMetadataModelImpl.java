package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import fi.csc.smear.db.model.SmearVariableMetadata;
import fi.csc.smear.db.model.SmearVariableMetadataModel;
import fi.csc.smear.db.model.SmearVariableMetadataSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SmearVariableMetadata service. Represents a row in the &quot;VariableMetadata&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.SmearVariableMetadataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SmearVariableMetadataImpl}.
 * </p>
 *
 * @author pj
 * @see SmearVariableMetadataImpl
 * @see fi.csc.smear.db.model.SmearVariableMetadata
 * @see fi.csc.smear.db.model.SmearVariableMetadataModel
 * @generated
 */
@JSON(strict = true)
public class SmearVariableMetadataModelImpl extends BaseModelImpl<SmearVariableMetadata>
    implements SmearVariableMetadataModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a smear variable metadata model instance should use the {@link fi.csc.smear.db.model.SmearVariableMetadata} interface instead.
     */
    public static final String TABLE_NAME = "VariableMetadata";
    public static final Object[][] TABLE_COLUMNS = {
            { "variableID", Types.BIGINT },
            { "tableID", Types.BIGINT },
            { "variable", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "unit", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "source", Types.VARCHAR },
            { "period_start", Types.TIMESTAMP },
            { "period_end", Types.TIMESTAMP },
            { "coverage", Types.BIGINT },
            { "rights", Types.VARCHAR },
            { "mandatory", Types.BOOLEAN },
            { "derivative", Types.BOOLEAN },
            { "vtimestamp", Types.TIMESTAMP },
            { "category", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table VariableMetadata (variableID LONG not null primary key,tableID LONG,variable VARCHAR(75) null,description VARCHAR(75) null,unit VARCHAR(75) null,title VARCHAR(75) null,source VARCHAR(75) null,period_start DATE null,period_end DATE null,coverage LONG,rights VARCHAR(75) null,mandatory BOOLEAN,derivative BOOLEAN,vtimestamp DATE null,category VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table VariableMetadata";
    public static final String ORDER_BY_JPQL = " ORDER BY smearVariableMetadata.variableID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY VariableMetadata.variableID ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.SmearVariableMetadata"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.SmearVariableMetadata"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.SmearVariableMetadata"));
    private static ClassLoader _classLoader = SmearVariableMetadata.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SmearVariableMetadata.class
        };
    private long _variableID;
    private long _tableID;
    private String _variable;
    private String _description;
    private String _unit;
    private String _title;
    private String _source;
    private Date _period_start;
    private Date _period_end;
    private long _coverage;
    private String _rights;
    private boolean _mandatory;
    private boolean _derivative;
    private Date _vtimestamp;
    private String _category;
    private SmearVariableMetadata _escapedModel;

    public SmearVariableMetadataModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SmearVariableMetadata toModel(
        SmearVariableMetadataSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SmearVariableMetadata model = new SmearVariableMetadataImpl();

        model.setVariableID(soapModel.getVariableID());
        model.setTableID(soapModel.getTableID());
        model.setVariable(soapModel.getVariable());
        model.setDescription(soapModel.getDescription());
        model.setUnit(soapModel.getUnit());
        model.setTitle(soapModel.getTitle());
        model.setSource(soapModel.getSource());
        model.setPeriod_start(soapModel.getPeriod_start());
        model.setPeriod_end(soapModel.getPeriod_end());
        model.setCoverage(soapModel.getCoverage());
        model.setRights(soapModel.getRights());
        model.setMandatory(soapModel.getMandatory());
        model.setDerivative(soapModel.getDerivative());
        model.setVtimestamp(soapModel.getVtimestamp());
        model.setCategory(soapModel.getCategory());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SmearVariableMetadata> toModels(
        SmearVariableMetadataSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SmearVariableMetadata> models = new ArrayList<SmearVariableMetadata>(soapModels.length);

        for (SmearVariableMetadataSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _variableID;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setVariableID(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _variableID;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SmearVariableMetadata.class;
    }

    @Override
    public String getModelClassName() {
        return SmearVariableMetadata.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("variableID", getVariableID());
        attributes.put("tableID", getTableID());
        attributes.put("variable", getVariable());
        attributes.put("description", getDescription());
        attributes.put("unit", getUnit());
        attributes.put("title", getTitle());
        attributes.put("source", getSource());
        attributes.put("period_start", getPeriod_start());
        attributes.put("period_end", getPeriod_end());
        attributes.put("coverage", getCoverage());
        attributes.put("rights", getRights());
        attributes.put("mandatory", getMandatory());
        attributes.put("derivative", getDerivative());
        attributes.put("vtimestamp", getVtimestamp());
        attributes.put("category", getCategory());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long variableID = (Long) attributes.get("variableID");

        if (variableID != null) {
            setVariableID(variableID);
        }

        Long tableID = (Long) attributes.get("tableID");

        if (tableID != null) {
            setTableID(tableID);
        }

        String variable = (String) attributes.get("variable");

        if (variable != null) {
            setVariable(variable);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String unit = (String) attributes.get("unit");

        if (unit != null) {
            setUnit(unit);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String source = (String) attributes.get("source");

        if (source != null) {
            setSource(source);
        }

        Date period_start = (Date) attributes.get("period_start");

        if (period_start != null) {
            setPeriod_start(period_start);
        }

        Date period_end = (Date) attributes.get("period_end");

        if (period_end != null) {
            setPeriod_end(period_end);
        }

        Long coverage = (Long) attributes.get("coverage");

        if (coverage != null) {
            setCoverage(coverage);
        }

        String rights = (String) attributes.get("rights");

        if (rights != null) {
            setRights(rights);
        }

        Boolean mandatory = (Boolean) attributes.get("mandatory");

        if (mandatory != null) {
            setMandatory(mandatory);
        }

        Boolean derivative = (Boolean) attributes.get("derivative");

        if (derivative != null) {
            setDerivative(derivative);
        }

        Date vtimestamp = (Date) attributes.get("vtimestamp");

        if (vtimestamp != null) {
            setVtimestamp(vtimestamp);
        }

        String category = (String) attributes.get("category");

        if (category != null) {
            setCategory(category);
        }
    }

    @JSON
    @Override
    public long getVariableID() {
        return _variableID;
    }

    @Override
    public void setVariableID(long variableID) {
        _variableID = variableID;
    }

    @JSON
    @Override
    public long getTableID() {
        return _tableID;
    }

    @Override
    public void setTableID(long tableID) {
        _tableID = tableID;
    }

    @JSON
    @Override
    public String getVariable() {
        if (_variable == null) {
            return StringPool.BLANK;
        } else {
            return _variable;
        }
    }

    @Override
    public void setVariable(String variable) {
        _variable = variable;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getUnit() {
        if (_unit == null) {
            return StringPool.BLANK;
        } else {
            return _unit;
        }
    }

    @Override
    public void setUnit(String unit) {
        _unit = unit;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getSource() {
        if (_source == null) {
            return StringPool.BLANK;
        } else {
            return _source;
        }
    }

    @Override
    public void setSource(String source) {
        _source = source;
    }

    @JSON
    @Override
    public Date getPeriod_start() {
        return _period_start;
    }

    @Override
    public void setPeriod_start(Date period_start) {
        _period_start = period_start;
    }

    @JSON
    @Override
    public Date getPeriod_end() {
        return _period_end;
    }

    @Override
    public void setPeriod_end(Date period_end) {
        _period_end = period_end;
    }

    @JSON
    @Override
    public long getCoverage() {
        return _coverage;
    }

    @Override
    public void setCoverage(long coverage) {
        _coverage = coverage;
    }

    @JSON
    @Override
    public String getRights() {
        if (_rights == null) {
            return StringPool.BLANK;
        } else {
            return _rights;
        }
    }

    @Override
    public void setRights(String rights) {
        _rights = rights;
    }

    @JSON
    @Override
    public boolean getMandatory() {
        return _mandatory;
    }

    @Override
    public boolean isMandatory() {
        return _mandatory;
    }

    @Override
    public void setMandatory(boolean mandatory) {
        _mandatory = mandatory;
    }

    @JSON
    @Override
    public boolean getDerivative() {
        return _derivative;
    }

    @Override
    public boolean isDerivative() {
        return _derivative;
    }

    @Override
    public void setDerivative(boolean derivative) {
        _derivative = derivative;
    }

    @JSON
    @Override
    public Date getVtimestamp() {
        return _vtimestamp;
    }

    @Override
    public void setVtimestamp(Date vtimestamp) {
        _vtimestamp = vtimestamp;
    }

    @JSON
    @Override
    public String getCategory() {
        if (_category == null) {
            return StringPool.BLANK;
        } else {
            return _category;
        }
    }

    @Override
    public void setCategory(String category) {
        _category = category;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SmearVariableMetadata.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SmearVariableMetadata toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SmearVariableMetadata) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SmearVariableMetadataImpl smearVariableMetadataImpl = new SmearVariableMetadataImpl();

        smearVariableMetadataImpl.setVariableID(getVariableID());
        smearVariableMetadataImpl.setTableID(getTableID());
        smearVariableMetadataImpl.setVariable(getVariable());
        smearVariableMetadataImpl.setDescription(getDescription());
        smearVariableMetadataImpl.setUnit(getUnit());
        smearVariableMetadataImpl.setTitle(getTitle());
        smearVariableMetadataImpl.setSource(getSource());
        smearVariableMetadataImpl.setPeriod_start(getPeriod_start());
        smearVariableMetadataImpl.setPeriod_end(getPeriod_end());
        smearVariableMetadataImpl.setCoverage(getCoverage());
        smearVariableMetadataImpl.setRights(getRights());
        smearVariableMetadataImpl.setMandatory(getMandatory());
        smearVariableMetadataImpl.setDerivative(getDerivative());
        smearVariableMetadataImpl.setVtimestamp(getVtimestamp());
        smearVariableMetadataImpl.setCategory(getCategory());

        smearVariableMetadataImpl.resetOriginalValues();

        return smearVariableMetadataImpl;
    }

    @Override
    public int compareTo(SmearVariableMetadata smearVariableMetadata) {
        long primaryKey = smearVariableMetadata.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SmearVariableMetadata)) {
            return false;
        }

        SmearVariableMetadata smearVariableMetadata = (SmearVariableMetadata) obj;

        long primaryKey = smearVariableMetadata.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SmearVariableMetadata> toCacheModel() {
        SmearVariableMetadataCacheModel smearVariableMetadataCacheModel = new SmearVariableMetadataCacheModel();

        smearVariableMetadataCacheModel.variableID = getVariableID();

        smearVariableMetadataCacheModel.tableID = getTableID();

        smearVariableMetadataCacheModel.variable = getVariable();

        String variable = smearVariableMetadataCacheModel.variable;

        if ((variable != null) && (variable.length() == 0)) {
            smearVariableMetadataCacheModel.variable = null;
        }

        smearVariableMetadataCacheModel.description = getDescription();

        String description = smearVariableMetadataCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            smearVariableMetadataCacheModel.description = null;
        }

        smearVariableMetadataCacheModel.unit = getUnit();

        String unit = smearVariableMetadataCacheModel.unit;

        if ((unit != null) && (unit.length() == 0)) {
            smearVariableMetadataCacheModel.unit = null;
        }

        smearVariableMetadataCacheModel.title = getTitle();

        String title = smearVariableMetadataCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            smearVariableMetadataCacheModel.title = null;
        }

        smearVariableMetadataCacheModel.source = getSource();

        String source = smearVariableMetadataCacheModel.source;

        if ((source != null) && (source.length() == 0)) {
            smearVariableMetadataCacheModel.source = null;
        }

        Date period_start = getPeriod_start();

        if (period_start != null) {
            smearVariableMetadataCacheModel.period_start = period_start.getTime();
        } else {
            smearVariableMetadataCacheModel.period_start = Long.MIN_VALUE;
        }

        Date period_end = getPeriod_end();

        if (period_end != null) {
            smearVariableMetadataCacheModel.period_end = period_end.getTime();
        } else {
            smearVariableMetadataCacheModel.period_end = Long.MIN_VALUE;
        }

        smearVariableMetadataCacheModel.coverage = getCoverage();

        smearVariableMetadataCacheModel.rights = getRights();

        String rights = smearVariableMetadataCacheModel.rights;

        if ((rights != null) && (rights.length() == 0)) {
            smearVariableMetadataCacheModel.rights = null;
        }

        smearVariableMetadataCacheModel.mandatory = getMandatory();

        smearVariableMetadataCacheModel.derivative = getDerivative();

        Date vtimestamp = getVtimestamp();

        if (vtimestamp != null) {
            smearVariableMetadataCacheModel.vtimestamp = vtimestamp.getTime();
        } else {
            smearVariableMetadataCacheModel.vtimestamp = Long.MIN_VALUE;
        }

        smearVariableMetadataCacheModel.category = getCategory();

        String category = smearVariableMetadataCacheModel.category;

        if ((category != null) && (category.length() == 0)) {
            smearVariableMetadataCacheModel.category = null;
        }

        return smearVariableMetadataCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(31);

        sb.append("{variableID=");
        sb.append(getVariableID());
        sb.append(", tableID=");
        sb.append(getTableID());
        sb.append(", variable=");
        sb.append(getVariable());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", unit=");
        sb.append(getUnit());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", source=");
        sb.append(getSource());
        sb.append(", period_start=");
        sb.append(getPeriod_start());
        sb.append(", period_end=");
        sb.append(getPeriod_end());
        sb.append(", coverage=");
        sb.append(getCoverage());
        sb.append(", rights=");
        sb.append(getRights());
        sb.append(", mandatory=");
        sb.append(getMandatory());
        sb.append(", derivative=");
        sb.append(getDerivative());
        sb.append(", vtimestamp=");
        sb.append(getVtimestamp());
        sb.append(", category=");
        sb.append(getCategory());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(49);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.SmearVariableMetadata");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>variableID</column-name><column-value><![CDATA[");
        sb.append(getVariableID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tableID</column-name><column-value><![CDATA[");
        sb.append(getTableID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>variable</column-name><column-value><![CDATA[");
        sb.append(getVariable());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unit</column-name><column-value><![CDATA[");
        sb.append(getUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>source</column-name><column-value><![CDATA[");
        sb.append(getSource());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period_start</column-name><column-value><![CDATA[");
        sb.append(getPeriod_start());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period_end</column-name><column-value><![CDATA[");
        sb.append(getPeriod_end());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>coverage</column-name><column-value><![CDATA[");
        sb.append(getCoverage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rights</column-name><column-value><![CDATA[");
        sb.append(getRights());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mandatory</column-name><column-value><![CDATA[");
        sb.append(getMandatory());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>derivative</column-name><column-value><![CDATA[");
        sb.append(getDerivative());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>vtimestamp</column-name><column-value><![CDATA[");
        sb.append(getVtimestamp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>category</column-name><column-value><![CDATA[");
        sb.append(getCategory());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
