package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import fi.csc.smear.db.model.SmearEvents;
import fi.csc.smear.db.model.SmearEventsModel;
import fi.csc.smear.db.model.SmearEventsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SmearEvents service. Represents a row in the &quot;Events&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.SmearEventsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SmearEventsImpl}.
 * </p>
 *
 * @author pj
 * @see SmearEventsImpl
 * @see fi.csc.smear.db.model.SmearEvents
 * @see fi.csc.smear.db.model.SmearEventsModel
 * @generated
 */
@JSON(strict = true)
public class SmearEventsModelImpl extends BaseModelImpl<SmearEvents>
    implements SmearEventsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a smear events model instance should use the {@link fi.csc.smear.db.model.SmearEvents} interface instead.
     */
    public static final String TABLE_NAME = "Events";
    public static final Object[][] TABLE_COLUMNS = {
            { "eventID", Types.BIGINT },
            { "event_type", Types.VARCHAR },
            { "event", Types.VARCHAR },
            { "who", Types.VARCHAR },
            { "period_start", Types.TIMESTAMP },
            { "period_end", Types.TIMESTAMP },
            { "etimestamp", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Events (eventID LONG not null primary key,event_type VARCHAR(75) null,event VARCHAR(75) null,who VARCHAR(75) null,period_start DATE null,period_end DATE null,etimestamp DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Events";
    public static final String ORDER_BY_JPQL = " ORDER BY smearEvents.eventID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Events.eventID ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.SmearEvents"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.SmearEvents"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.SmearEvents"));
    private static ClassLoader _classLoader = SmearEvents.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SmearEvents.class
        };
    private long _eventID;
    private String _event_type;
    private String _event;
    private String _who;
    private Date _period_start;
    private Date _period_end;
    private Date _etimestamp;
    private SmearEvents _escapedModel;

    public SmearEventsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static SmearEvents toModel(SmearEventsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        SmearEvents model = new SmearEventsImpl();

        model.setEventID(soapModel.getEventID());
        model.setEvent_type(soapModel.getEvent_type());
        model.setEvent(soapModel.getEvent());
        model.setWho(soapModel.getWho());
        model.setPeriod_start(soapModel.getPeriod_start());
        model.setPeriod_end(soapModel.getPeriod_end());
        model.setEtimestamp(soapModel.getEtimestamp());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<SmearEvents> toModels(SmearEventsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<SmearEvents> models = new ArrayList<SmearEvents>(soapModels.length);

        for (SmearEventsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _eventID;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEventID(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _eventID;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return SmearEvents.class;
    }

    @Override
    public String getModelClassName() {
        return SmearEvents.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("eventID", getEventID());
        attributes.put("event_type", getEvent_type());
        attributes.put("event", getEvent());
        attributes.put("who", getWho());
        attributes.put("period_start", getPeriod_start());
        attributes.put("period_end", getPeriod_end());
        attributes.put("etimestamp", getEtimestamp());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long eventID = (Long) attributes.get("eventID");

        if (eventID != null) {
            setEventID(eventID);
        }

        String event_type = (String) attributes.get("event_type");

        if (event_type != null) {
            setEvent_type(event_type);
        }

        String event = (String) attributes.get("event");

        if (event != null) {
            setEvent(event);
        }

        String who = (String) attributes.get("who");

        if (who != null) {
            setWho(who);
        }

        Date period_start = (Date) attributes.get("period_start");

        if (period_start != null) {
            setPeriod_start(period_start);
        }

        Date period_end = (Date) attributes.get("period_end");

        if (period_end != null) {
            setPeriod_end(period_end);
        }

        Date etimestamp = (Date) attributes.get("etimestamp");

        if (etimestamp != null) {
            setEtimestamp(etimestamp);
        }
    }

    @JSON
    @Override
    public long getEventID() {
        return _eventID;
    }

    @Override
    public void setEventID(long eventID) {
        _eventID = eventID;
    }

    @JSON
    @Override
    public String getEvent_type() {
        if (_event_type == null) {
            return StringPool.BLANK;
        } else {
            return _event_type;
        }
    }

    @Override
    public void setEvent_type(String event_type) {
        _event_type = event_type;
    }

    @JSON
    @Override
    public String getEvent() {
        if (_event == null) {
            return StringPool.BLANK;
        } else {
            return _event;
        }
    }

    @Override
    public void setEvent(String event) {
        _event = event;
    }

    @JSON
    @Override
    public String getWho() {
        if (_who == null) {
            return StringPool.BLANK;
        } else {
            return _who;
        }
    }

    @Override
    public void setWho(String who) {
        _who = who;
    }

    @JSON
    @Override
    public Date getPeriod_start() {
        return _period_start;
    }

    @Override
    public void setPeriod_start(Date period_start) {
        _period_start = period_start;
    }

    @JSON
    @Override
    public Date getPeriod_end() {
        return _period_end;
    }

    @Override
    public void setPeriod_end(Date period_end) {
        _period_end = period_end;
    }

    @JSON
    @Override
    public Date getEtimestamp() {
        return _etimestamp;
    }

    @Override
    public void setEtimestamp(Date etimestamp) {
        _etimestamp = etimestamp;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            SmearEvents.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public SmearEvents toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SmearEvents) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SmearEventsImpl smearEventsImpl = new SmearEventsImpl();

        smearEventsImpl.setEventID(getEventID());
        smearEventsImpl.setEvent_type(getEvent_type());
        smearEventsImpl.setEvent(getEvent());
        smearEventsImpl.setWho(getWho());
        smearEventsImpl.setPeriod_start(getPeriod_start());
        smearEventsImpl.setPeriod_end(getPeriod_end());
        smearEventsImpl.setEtimestamp(getEtimestamp());

        smearEventsImpl.resetOriginalValues();

        return smearEventsImpl;
    }

    @Override
    public int compareTo(SmearEvents smearEvents) {
        long primaryKey = smearEvents.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SmearEvents)) {
            return false;
        }

        SmearEvents smearEvents = (SmearEvents) obj;

        long primaryKey = smearEvents.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<SmearEvents> toCacheModel() {
        SmearEventsCacheModel smearEventsCacheModel = new SmearEventsCacheModel();

        smearEventsCacheModel.eventID = getEventID();

        smearEventsCacheModel.event_type = getEvent_type();

        String event_type = smearEventsCacheModel.event_type;

        if ((event_type != null) && (event_type.length() == 0)) {
            smearEventsCacheModel.event_type = null;
        }

        smearEventsCacheModel.event = getEvent();

        String event = smearEventsCacheModel.event;

        if ((event != null) && (event.length() == 0)) {
            smearEventsCacheModel.event = null;
        }

        smearEventsCacheModel.who = getWho();

        String who = smearEventsCacheModel.who;

        if ((who != null) && (who.length() == 0)) {
            smearEventsCacheModel.who = null;
        }

        Date period_start = getPeriod_start();

        if (period_start != null) {
            smearEventsCacheModel.period_start = period_start.getTime();
        } else {
            smearEventsCacheModel.period_start = Long.MIN_VALUE;
        }

        Date period_end = getPeriod_end();

        if (period_end != null) {
            smearEventsCacheModel.period_end = period_end.getTime();
        } else {
            smearEventsCacheModel.period_end = Long.MIN_VALUE;
        }

        Date etimestamp = getEtimestamp();

        if (etimestamp != null) {
            smearEventsCacheModel.etimestamp = etimestamp.getTime();
        } else {
            smearEventsCacheModel.etimestamp = Long.MIN_VALUE;
        }

        return smearEventsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{eventID=");
        sb.append(getEventID());
        sb.append(", event_type=");
        sb.append(getEvent_type());
        sb.append(", event=");
        sb.append(getEvent());
        sb.append(", who=");
        sb.append(getWho());
        sb.append(", period_start=");
        sb.append(getPeriod_start());
        sb.append(", period_end=");
        sb.append(getPeriod_end());
        sb.append(", etimestamp=");
        sb.append(getEtimestamp());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.SmearEvents");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>eventID</column-name><column-value><![CDATA[");
        sb.append(getEventID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>event_type</column-name><column-value><![CDATA[");
        sb.append(getEvent_type());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>event</column-name><column-value><![CDATA[");
        sb.append(getEvent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>who</column-name><column-value><![CDATA[");
        sb.append(getWho());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period_start</column-name><column-value><![CDATA[");
        sb.append(getPeriod_start());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>period_end</column-name><column-value><![CDATA[");
        sb.append(getPeriod_end());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>etimestamp</column-name><column-value><![CDATA[");
        sb.append(getEtimestamp());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
