package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.smear.db.model.Hyde_eddytow;
import fi.csc.smear.db.model.Hyde_eddytowModel;
import fi.csc.smear.db.model.Hyde_eddytowSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Hyde_eddytow service. Represents a row in the &quot;HYY_EDDYTOW&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.Hyde_eddytowModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Hyde_eddytowImpl}.
 * </p>
 *
 * @author pj
 * @see Hyde_eddytowImpl
 * @see fi.csc.smear.db.model.Hyde_eddytow
 * @see fi.csc.smear.db.model.Hyde_eddytowModel
 * @generated
 */
@JSON(strict = true)
public class Hyde_eddytowModelImpl extends BaseModelImpl<Hyde_eddytow>
    implements Hyde_eddytowModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a hyde_eddytow model instance should use the {@link fi.csc.smear.db.model.Hyde_eddytow} interface instead.
     */
    public static final String TABLE_NAME = "HYY_EDDYTOW";
    public static final Object[][] TABLE_COLUMNS = {
            { "samptime", Types.TIMESTAMP },
            { "H_radtow", Types.FLOAT },
            { "H_radtow_EMEP", Types.INTEGER },
            { "Qc_H_radtow", Types.INTEGER },
            { "Qc_H_radtow_EMEP", Types.INTEGER },
            { "LE_radtow", Types.FLOAT },
            { "LE_radtow_EMEP", Types.INTEGER },
            { "Qc_LE_radtow", Types.INTEGER },
            { "Qc_LE_radtow_EMEP", Types.INTEGER },
            { "E_radtow", Types.FLOAT },
            { "E_radtow_EMEP", Types.INTEGER },
            { "Qc_E_radtow", Types.INTEGER },
            { "Qc_E_radtow_EMEP", Types.INTEGER },
            { "F_c_radtow", Types.FLOAT },
            { "F_c_radtow_EMEP", Types.INTEGER },
            { "Qc_F_c_radtow", Types.INTEGER },
            { "Qc_F_c_radtow_EMEP", Types.INTEGER },
            { "tau_radtow", Types.FLOAT },
            { "tau_radtow_EMEP", Types.INTEGER },
            { "Qc_tau_radtow", Types.INTEGER },
            { "Qc_tau_radtow_EMEP", Types.INTEGER },
            { "u_star_radtow", Types.FLOAT },
            { "u_star_radtow_EMEP", Types.INTEGER },
            { "MO_length_radtow", Types.FLOAT },
            { "MO_length_radtow_EMEP", Types.INTEGER },
            { "std_u_radtow", Types.FLOAT },
            { "std_u_radtow_EMEP", Types.INTEGER },
            { "std_v_radtow", Types.FLOAT },
            { "std_v_radtow_EMEP", Types.INTEGER },
            { "std_w_radtow", Types.FLOAT },
            { "std_w_radtow_EMEP", Types.INTEGER },
            { "std_t_radtow", Types.FLOAT },
            { "std_t_radtow_EMEP", Types.INTEGER },
            { "std_c_radtow", Types.FLOAT },
            { "std_c_radtow_EMEP", Types.INTEGER },
            { "std_h_radtow", Types.FLOAT },
            { "std_h_radtow_EMEP", Types.INTEGER },
            { "av_u_radtow", Types.FLOAT },
            { "av_u_radtow_EMEP", Types.INTEGER },
            { "av_v_radtow", Types.FLOAT },
            { "av_v_radtow_EMEP", Types.INTEGER },
            { "av_w_radtow", Types.FLOAT },
            { "av_w_radtow_EMEP", Types.INTEGER },
            { "av_t_radtow", Types.FLOAT },
            { "av_t_radtow_EMEP", Types.INTEGER },
            { "av_c_radtow", Types.FLOAT },
            { "av_c_radtow_EMEP", Types.INTEGER },
            { "av_h_radtow", Types.FLOAT },
            { "av_h_radtow_EMEP", Types.INTEGER },
            { "U_radtow", Types.FLOAT },
            { "U_radtow_EMEP", Types.INTEGER },
            { "wind_dir_radtow", Types.FLOAT },
            { "wind_dir_radtow_EMEP", Types.INTEGER },
            { "eta_radtow", Types.FLOAT },
            { "eta_radtow_EMEP", Types.INTEGER },
            { "theta_radtow", Types.FLOAT },
            { "theta_radtow_EMEP", Types.INTEGER },
            { "beta_radtow", Types.FLOAT },
            { "beta_radtow_EMEP", Types.INTEGER },
            { "c_lag_radtow", Types.FLOAT },
            { "c_lag_radtow_EMEP", Types.INTEGER },
            { "h_lag_radtow", Types.FLOAT },
            { "h_lag_radtow_EMEP", Types.INTEGER },
            { "err_packet_radtow", Types.FLOAT },
            { "err_packet_radtow_EMEP", Types.INTEGER },
            { "licor_t_std_radtow", Types.FLOAT },
            { "licor_t_std_radtow_EMEP", Types.INTEGER },
            { "licor_t_av_radtow", Types.FLOAT },
            { "licor_t_av_radtow_EMEP", Types.INTEGER },
            { "licor_p_std_radtow", Types.FLOAT },
            { "licor_p_std_radtow_EMEP", Types.INTEGER },
            { "licor_p_av_radtow", Types.FLOAT },
            { "licor_p_av_radtow_EMEP", Types.INTEGER },
            { "F_O3_radtow", Types.FLOAT },
            { "F_O3_radtow_EMEP", Types.INTEGER },
            { "Qc_F_O3_radtow", Types.INTEGER },
            { "Qc_F_O3_radtow_EMEP", Types.INTEGER },
            { "std_O3_radtow", Types.FLOAT },
            { "std_O3_radtow_EMEP", Types.INTEGER },
            { "av_O3_radtow", Types.FLOAT },
            { "av_O3_radtow_EMEP", Types.INTEGER },
            { "O3_lag_radtow", Types.FLOAT },
            { "O3_lag_radtow_EMEP", Types.INTEGER },
            { "NEE_radtow", Types.FLOAT },
            { "NEE_radtow_EMEP", Types.INTEGER },
            { "Qc_gapf_NEE_radtow", Types.INTEGER },
            { "Qc_gapf_NEE_radtow_EMEP", Types.INTEGER },
            { "GPP_radtow", Types.FLOAT },
            { "GPP_radtow_EMEP", Types.INTEGER },
            { "TER_radtow", Types.FLOAT },
            { "TER_radtow_EMEP", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table HYY_EDDYTOW (samptime DATE not null primary key,H_radtow DOUBLE,H_radtow_EMEP INTEGER,Qc_H_radtow INTEGER,Qc_H_radtow_EMEP INTEGER,LE_radtow DOUBLE,LE_radtow_EMEP INTEGER,Qc_LE_radtow INTEGER,Qc_LE_radtow_EMEP INTEGER,E_radtow DOUBLE,E_radtow_EMEP INTEGER,Qc_E_radtow INTEGER,Qc_E_radtow_EMEP INTEGER,F_c_radtow DOUBLE,F_c_radtow_EMEP INTEGER,Qc_F_c_radtow INTEGER,Qc_F_c_radtow_EMEP INTEGER,tau_radtow DOUBLE,tau_radtow_EMEP INTEGER,Qc_tau_radtow INTEGER,Qc_tau_radtow_EMEP INTEGER,u_star_radtow DOUBLE,u_star_radtow_EMEP INTEGER,MO_length_radtow DOUBLE,MO_length_radtow_EMEP INTEGER,std_u_radtow DOUBLE,std_u_radtow_EMEP INTEGER,std_v_radtow DOUBLE,std_v_radtow_EMEP INTEGER,std_w_radtow DOUBLE,std_w_radtow_EMEP INTEGER,std_t_radtow DOUBLE,std_t_radtow_EMEP INTEGER,std_c_radtow DOUBLE,std_c_radtow_EMEP INTEGER,std_h_radtow DOUBLE,std_h_radtow_EMEP INTEGER,av_u_radtow DOUBLE,av_u_radtow_EMEP INTEGER,av_v_radtow DOUBLE,av_v_radtow_EMEP INTEGER,av_w_radtow DOUBLE,av_w_radtow_EMEP INTEGER,av_t_radtow DOUBLE,av_t_radtow_EMEP INTEGER,av_c_radtow DOUBLE,av_c_radtow_EMEP INTEGER,av_h_radtow DOUBLE,av_h_radtow_EMEP INTEGER,U_radtow DOUBLE,U_radtow_EMEP INTEGER,wind_dir_radtow DOUBLE,wind_dir_radtow_EMEP INTEGER,eta_radtow DOUBLE,eta_radtow_EMEP INTEGER,theta_radtow DOUBLE,theta_radtow_EMEP INTEGER,beta_radtow DOUBLE,beta_radtow_EMEP INTEGER,c_lag_radtow DOUBLE,c_lag_radtow_EMEP INTEGER,h_lag_radtow DOUBLE,h_lag_radtow_EMEP INTEGER,err_packet_radtow DOUBLE,err_packet_radtow_EMEP INTEGER,licor_t_std_radtow DOUBLE,licor_t_std_radtow_EMEP INTEGER,licor_t_av_radtow DOUBLE,licor_t_av_radtow_EMEP INTEGER,licor_p_std_radtow DOUBLE,licor_p_std_radtow_EMEP INTEGER,licor_p_av_radtow DOUBLE,licor_p_av_radtow_EMEP INTEGER,F_O3_radtow DOUBLE,F_O3_radtow_EMEP INTEGER,Qc_F_O3_radtow INTEGER,Qc_F_O3_radtow_EMEP INTEGER,std_O3_radtow DOUBLE,std_O3_radtow_EMEP INTEGER,av_O3_radtow DOUBLE,av_O3_radtow_EMEP INTEGER,O3_lag_radtow DOUBLE,O3_lag_radtow_EMEP INTEGER,NEE_radtow DOUBLE,NEE_radtow_EMEP INTEGER,Qc_gapf_NEE_radtow INTEGER,Qc_gapf_NEE_radtow_EMEP INTEGER,GPP_radtow DOUBLE,GPP_radtow_EMEP INTEGER,TER_radtow DOUBLE,TER_radtow_EMEP INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table HYY_EDDYTOW";
    public static final String ORDER_BY_JPQL = " ORDER BY hyde_eddytow.samptime ASC";
    public static final String ORDER_BY_SQL = " ORDER BY HYY_EDDYTOW.samptime ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.Hyde_eddytow"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.Hyde_eddytow"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.Hyde_eddytow"));
    private static ClassLoader _classLoader = Hyde_eddytow.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Hyde_eddytow.class
        };
    private Date _samptime;
    private float _H_radtow;
    private int _H_radtow_EMEP;
    private int _Qc_H_radtow;
    private int _Qc_H_radtow_EMEP;
    private float _LE_radtow;
    private int _LE_radtow_EMEP;
    private int _Qc_LE_radtow;
    private int _Qc_LE_radtow_EMEP;
    private float _E_radtow;
    private int _E_radtow_EMEP;
    private int _Qc_E_radtow;
    private int _Qc_E_radtow_EMEP;
    private float _F_c_radtow;
    private int _F_c_radtow_EMEP;
    private int _Qc_F_c_radtow;
    private int _Qc_F_c_radtow_EMEP;
    private float _tau_radtow;
    private int _tau_radtow_EMEP;
    private int _Qc_tau_radtow;
    private int _Qc_tau_radtow_EMEP;
    private float _u_star_radtow;
    private int _u_star_radtow_EMEP;
    private float _MO_length_radtow;
    private int _MO_length_radtow_EMEP;
    private float _std_u_radtow;
    private int _std_u_radtow_EMEP;
    private float _std_v_radtow;
    private int _std_v_radtow_EMEP;
    private float _std_w_radtow;
    private int _std_w_radtow_EMEP;
    private float _std_t_radtow;
    private int _std_t_radtow_EMEP;
    private float _std_c_radtow;
    private int _std_c_radtow_EMEP;
    private float _std_h_radtow;
    private int _std_h_radtow_EMEP;
    private float _av_u_radtow;
    private int _av_u_radtow_EMEP;
    private float _av_v_radtow;
    private int _av_v_radtow_EMEP;
    private float _av_w_radtow;
    private int _av_w_radtow_EMEP;
    private float _av_t_radtow;
    private int _av_t_radtow_EMEP;
    private float _av_c_radtow;
    private int _av_c_radtow_EMEP;
    private float _av_h_radtow;
    private int _av_h_radtow_EMEP;
    private float _U_radtow;
    private int _U_radtow_EMEP;
    private float _wind_dir_radtow;
    private int _wind_dir_radtow_EMEP;
    private float _eta_radtow;
    private int _eta_radtow_EMEP;
    private float _theta_radtow;
    private int _theta_radtow_EMEP;
    private float _beta_radtow;
    private int _beta_radtow_EMEP;
    private float _c_lag_radtow;
    private int _c_lag_radtow_EMEP;
    private float _h_lag_radtow;
    private int _h_lag_radtow_EMEP;
    private float _err_packet_radtow;
    private int _err_packet_radtow_EMEP;
    private float _licor_t_std_radtow;
    private int _licor_t_std_radtow_EMEP;
    private float _licor_t_av_radtow;
    private int _licor_t_av_radtow_EMEP;
    private float _licor_p_std_radtow;
    private int _licor_p_std_radtow_EMEP;
    private float _licor_p_av_radtow;
    private int _licor_p_av_radtow_EMEP;
    private float _F_O3_radtow;
    private int _F_O3_radtow_EMEP;
    private int _Qc_F_O3_radtow;
    private int _Qc_F_O3_radtow_EMEP;
    private float _std_O3_radtow;
    private int _std_O3_radtow_EMEP;
    private float _av_O3_radtow;
    private int _av_O3_radtow_EMEP;
    private float _O3_lag_radtow;
    private int _O3_lag_radtow_EMEP;
    private float _NEE_radtow;
    private int _NEE_radtow_EMEP;
    private int _Qc_gapf_NEE_radtow;
    private int _Qc_gapf_NEE_radtow_EMEP;
    private float _GPP_radtow;
    private int _GPP_radtow_EMEP;
    private float _TER_radtow;
    private int _TER_radtow_EMEP;
    private Hyde_eddytow _escapedModel;

    public Hyde_eddytowModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Hyde_eddytow toModel(Hyde_eddytowSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Hyde_eddytow model = new Hyde_eddytowImpl();

        model.setSamptime(soapModel.getSamptime());
        model.setH_radtow(soapModel.getH_radtow());
        model.setH_radtow_EMEP(soapModel.getH_radtow_EMEP());
        model.setQc_H_radtow(soapModel.getQc_H_radtow());
        model.setQc_H_radtow_EMEP(soapModel.getQc_H_radtow_EMEP());
        model.setLE_radtow(soapModel.getLE_radtow());
        model.setLE_radtow_EMEP(soapModel.getLE_radtow_EMEP());
        model.setQc_LE_radtow(soapModel.getQc_LE_radtow());
        model.setQc_LE_radtow_EMEP(soapModel.getQc_LE_radtow_EMEP());
        model.setE_radtow(soapModel.getE_radtow());
        model.setE_radtow_EMEP(soapModel.getE_radtow_EMEP());
        model.setQc_E_radtow(soapModel.getQc_E_radtow());
        model.setQc_E_radtow_EMEP(soapModel.getQc_E_radtow_EMEP());
        model.setF_c_radtow(soapModel.getF_c_radtow());
        model.setF_c_radtow_EMEP(soapModel.getF_c_radtow_EMEP());
        model.setQc_F_c_radtow(soapModel.getQc_F_c_radtow());
        model.setQc_F_c_radtow_EMEP(soapModel.getQc_F_c_radtow_EMEP());
        model.setTau_radtow(soapModel.getTau_radtow());
        model.setTau_radtow_EMEP(soapModel.getTau_radtow_EMEP());
        model.setQc_tau_radtow(soapModel.getQc_tau_radtow());
        model.setQc_tau_radtow_EMEP(soapModel.getQc_tau_radtow_EMEP());
        model.setU_star_radtow(soapModel.getU_star_radtow());
        model.setU_star_radtow_EMEP(soapModel.getU_star_radtow_EMEP());
        model.setMO_length_radtow(soapModel.getMO_length_radtow());
        model.setMO_length_radtow_EMEP(soapModel.getMO_length_radtow_EMEP());
        model.setStd_u_radtow(soapModel.getStd_u_radtow());
        model.setStd_u_radtow_EMEP(soapModel.getStd_u_radtow_EMEP());
        model.setStd_v_radtow(soapModel.getStd_v_radtow());
        model.setStd_v_radtow_EMEP(soapModel.getStd_v_radtow_EMEP());
        model.setStd_w_radtow(soapModel.getStd_w_radtow());
        model.setStd_w_radtow_EMEP(soapModel.getStd_w_radtow_EMEP());
        model.setStd_t_radtow(soapModel.getStd_t_radtow());
        model.setStd_t_radtow_EMEP(soapModel.getStd_t_radtow_EMEP());
        model.setStd_c_radtow(soapModel.getStd_c_radtow());
        model.setStd_c_radtow_EMEP(soapModel.getStd_c_radtow_EMEP());
        model.setStd_h_radtow(soapModel.getStd_h_radtow());
        model.setStd_h_radtow_EMEP(soapModel.getStd_h_radtow_EMEP());
        model.setAv_u_radtow(soapModel.getAv_u_radtow());
        model.setAv_u_radtow_EMEP(soapModel.getAv_u_radtow_EMEP());
        model.setAv_v_radtow(soapModel.getAv_v_radtow());
        model.setAv_v_radtow_EMEP(soapModel.getAv_v_radtow_EMEP());
        model.setAv_w_radtow(soapModel.getAv_w_radtow());
        model.setAv_w_radtow_EMEP(soapModel.getAv_w_radtow_EMEP());
        model.setAv_t_radtow(soapModel.getAv_t_radtow());
        model.setAv_t_radtow_EMEP(soapModel.getAv_t_radtow_EMEP());
        model.setAv_c_radtow(soapModel.getAv_c_radtow());
        model.setAv_c_radtow_EMEP(soapModel.getAv_c_radtow_EMEP());
        model.setAv_h_radtow(soapModel.getAv_h_radtow());
        model.setAv_h_radtow_EMEP(soapModel.getAv_h_radtow_EMEP());
        model.setU_radtow(soapModel.getU_radtow());
        model.setU_radtow_EMEP(soapModel.getU_radtow_EMEP());
        model.setWind_dir_radtow(soapModel.getWind_dir_radtow());
        model.setWind_dir_radtow_EMEP(soapModel.getWind_dir_radtow_EMEP());
        model.setEta_radtow(soapModel.getEta_radtow());
        model.setEta_radtow_EMEP(soapModel.getEta_radtow_EMEP());
        model.setTheta_radtow(soapModel.getTheta_radtow());
        model.setTheta_radtow_EMEP(soapModel.getTheta_radtow_EMEP());
        model.setBeta_radtow(soapModel.getBeta_radtow());
        model.setBeta_radtow_EMEP(soapModel.getBeta_radtow_EMEP());
        model.setC_lag_radtow(soapModel.getC_lag_radtow());
        model.setC_lag_radtow_EMEP(soapModel.getC_lag_radtow_EMEP());
        model.setH_lag_radtow(soapModel.getH_lag_radtow());
        model.setH_lag_radtow_EMEP(soapModel.getH_lag_radtow_EMEP());
        model.setErr_packet_radtow(soapModel.getErr_packet_radtow());
        model.setErr_packet_radtow_EMEP(soapModel.getErr_packet_radtow_EMEP());
        model.setLicor_t_std_radtow(soapModel.getLicor_t_std_radtow());
        model.setLicor_t_std_radtow_EMEP(soapModel.getLicor_t_std_radtow_EMEP());
        model.setLicor_t_av_radtow(soapModel.getLicor_t_av_radtow());
        model.setLicor_t_av_radtow_EMEP(soapModel.getLicor_t_av_radtow_EMEP());
        model.setLicor_p_std_radtow(soapModel.getLicor_p_std_radtow());
        model.setLicor_p_std_radtow_EMEP(soapModel.getLicor_p_std_radtow_EMEP());
        model.setLicor_p_av_radtow(soapModel.getLicor_p_av_radtow());
        model.setLicor_p_av_radtow_EMEP(soapModel.getLicor_p_av_radtow_EMEP());
        model.setF_O3_radtow(soapModel.getF_O3_radtow());
        model.setF_O3_radtow_EMEP(soapModel.getF_O3_radtow_EMEP());
        model.setQc_F_O3_radtow(soapModel.getQc_F_O3_radtow());
        model.setQc_F_O3_radtow_EMEP(soapModel.getQc_F_O3_radtow_EMEP());
        model.setStd_O3_radtow(soapModel.getStd_O3_radtow());
        model.setStd_O3_radtow_EMEP(soapModel.getStd_O3_radtow_EMEP());
        model.setAv_O3_radtow(soapModel.getAv_O3_radtow());
        model.setAv_O3_radtow_EMEP(soapModel.getAv_O3_radtow_EMEP());
        model.setO3_lag_radtow(soapModel.getO3_lag_radtow());
        model.setO3_lag_radtow_EMEP(soapModel.getO3_lag_radtow_EMEP());
        model.setNEE_radtow(soapModel.getNEE_radtow());
        model.setNEE_radtow_EMEP(soapModel.getNEE_radtow_EMEP());
        model.setQc_gapf_NEE_radtow(soapModel.getQc_gapf_NEE_radtow());
        model.setQc_gapf_NEE_radtow_EMEP(soapModel.getQc_gapf_NEE_radtow_EMEP());
        model.setGPP_radtow(soapModel.getGPP_radtow());
        model.setGPP_radtow_EMEP(soapModel.getGPP_radtow_EMEP());
        model.setTER_radtow(soapModel.getTER_radtow());
        model.setTER_radtow_EMEP(soapModel.getTER_radtow_EMEP());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Hyde_eddytow> toModels(Hyde_eddytowSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Hyde_eddytow> models = new ArrayList<Hyde_eddytow>(soapModels.length);

        for (Hyde_eddytowSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public java.util.Date getPrimaryKey() {
        return _samptime;
    }

    @Override
    public void setPrimaryKey(java.util.Date primaryKey) {
        setSamptime(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _samptime;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((java.util.Date) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Hyde_eddytow.class;
    }

    @Override
    public String getModelClassName() {
        return Hyde_eddytow.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("samptime", getSamptime());
        attributes.put("H_radtow", getH_radtow());
        attributes.put("H_radtow_EMEP", getH_radtow_EMEP());
        attributes.put("Qc_H_radtow", getQc_H_radtow());
        attributes.put("Qc_H_radtow_EMEP", getQc_H_radtow_EMEP());
        attributes.put("LE_radtow", getLE_radtow());
        attributes.put("LE_radtow_EMEP", getLE_radtow_EMEP());
        attributes.put("Qc_LE_radtow", getQc_LE_radtow());
        attributes.put("Qc_LE_radtow_EMEP", getQc_LE_radtow_EMEP());
        attributes.put("E_radtow", getE_radtow());
        attributes.put("E_radtow_EMEP", getE_radtow_EMEP());
        attributes.put("Qc_E_radtow", getQc_E_radtow());
        attributes.put("Qc_E_radtow_EMEP", getQc_E_radtow_EMEP());
        attributes.put("F_c_radtow", getF_c_radtow());
        attributes.put("F_c_radtow_EMEP", getF_c_radtow_EMEP());
        attributes.put("Qc_F_c_radtow", getQc_F_c_radtow());
        attributes.put("Qc_F_c_radtow_EMEP", getQc_F_c_radtow_EMEP());
        attributes.put("tau_radtow", getTau_radtow());
        attributes.put("tau_radtow_EMEP", getTau_radtow_EMEP());
        attributes.put("Qc_tau_radtow", getQc_tau_radtow());
        attributes.put("Qc_tau_radtow_EMEP", getQc_tau_radtow_EMEP());
        attributes.put("u_star_radtow", getU_star_radtow());
        attributes.put("u_star_radtow_EMEP", getU_star_radtow_EMEP());
        attributes.put("MO_length_radtow", getMO_length_radtow());
        attributes.put("MO_length_radtow_EMEP", getMO_length_radtow_EMEP());
        attributes.put("std_u_radtow", getStd_u_radtow());
        attributes.put("std_u_radtow_EMEP", getStd_u_radtow_EMEP());
        attributes.put("std_v_radtow", getStd_v_radtow());
        attributes.put("std_v_radtow_EMEP", getStd_v_radtow_EMEP());
        attributes.put("std_w_radtow", getStd_w_radtow());
        attributes.put("std_w_radtow_EMEP", getStd_w_radtow_EMEP());
        attributes.put("std_t_radtow", getStd_t_radtow());
        attributes.put("std_t_radtow_EMEP", getStd_t_radtow_EMEP());
        attributes.put("std_c_radtow", getStd_c_radtow());
        attributes.put("std_c_radtow_EMEP", getStd_c_radtow_EMEP());
        attributes.put("std_h_radtow", getStd_h_radtow());
        attributes.put("std_h_radtow_EMEP", getStd_h_radtow_EMEP());
        attributes.put("av_u_radtow", getAv_u_radtow());
        attributes.put("av_u_radtow_EMEP", getAv_u_radtow_EMEP());
        attributes.put("av_v_radtow", getAv_v_radtow());
        attributes.put("av_v_radtow_EMEP", getAv_v_radtow_EMEP());
        attributes.put("av_w_radtow", getAv_w_radtow());
        attributes.put("av_w_radtow_EMEP", getAv_w_radtow_EMEP());
        attributes.put("av_t_radtow", getAv_t_radtow());
        attributes.put("av_t_radtow_EMEP", getAv_t_radtow_EMEP());
        attributes.put("av_c_radtow", getAv_c_radtow());
        attributes.put("av_c_radtow_EMEP", getAv_c_radtow_EMEP());
        attributes.put("av_h_radtow", getAv_h_radtow());
        attributes.put("av_h_radtow_EMEP", getAv_h_radtow_EMEP());
        attributes.put("U_radtow", getU_radtow());
        attributes.put("U_radtow_EMEP", getU_radtow_EMEP());
        attributes.put("wind_dir_radtow", getWind_dir_radtow());
        attributes.put("wind_dir_radtow_EMEP", getWind_dir_radtow_EMEP());
        attributes.put("eta_radtow", getEta_radtow());
        attributes.put("eta_radtow_EMEP", getEta_radtow_EMEP());
        attributes.put("theta_radtow", getTheta_radtow());
        attributes.put("theta_radtow_EMEP", getTheta_radtow_EMEP());
        attributes.put("beta_radtow", getBeta_radtow());
        attributes.put("beta_radtow_EMEP", getBeta_radtow_EMEP());
        attributes.put("c_lag_radtow", getC_lag_radtow());
        attributes.put("c_lag_radtow_EMEP", getC_lag_radtow_EMEP());
        attributes.put("h_lag_radtow", getH_lag_radtow());
        attributes.put("h_lag_radtow_EMEP", getH_lag_radtow_EMEP());
        attributes.put("err_packet_radtow", getErr_packet_radtow());
        attributes.put("err_packet_radtow_EMEP", getErr_packet_radtow_EMEP());
        attributes.put("licor_t_std_radtow", getLicor_t_std_radtow());
        attributes.put("licor_t_std_radtow_EMEP", getLicor_t_std_radtow_EMEP());
        attributes.put("licor_t_av_radtow", getLicor_t_av_radtow());
        attributes.put("licor_t_av_radtow_EMEP", getLicor_t_av_radtow_EMEP());
        attributes.put("licor_p_std_radtow", getLicor_p_std_radtow());
        attributes.put("licor_p_std_radtow_EMEP", getLicor_p_std_radtow_EMEP());
        attributes.put("licor_p_av_radtow", getLicor_p_av_radtow());
        attributes.put("licor_p_av_radtow_EMEP", getLicor_p_av_radtow_EMEP());
        attributes.put("F_O3_radtow", getF_O3_radtow());
        attributes.put("F_O3_radtow_EMEP", getF_O3_radtow_EMEP());
        attributes.put("Qc_F_O3_radtow", getQc_F_O3_radtow());
        attributes.put("Qc_F_O3_radtow_EMEP", getQc_F_O3_radtow_EMEP());
        attributes.put("std_O3_radtow", getStd_O3_radtow());
        attributes.put("std_O3_radtow_EMEP", getStd_O3_radtow_EMEP());
        attributes.put("av_O3_radtow", getAv_O3_radtow());
        attributes.put("av_O3_radtow_EMEP", getAv_O3_radtow_EMEP());
        attributes.put("O3_lag_radtow", getO3_lag_radtow());
        attributes.put("O3_lag_radtow_EMEP", getO3_lag_radtow_EMEP());
        attributes.put("NEE_radtow", getNEE_radtow());
        attributes.put("NEE_radtow_EMEP", getNEE_radtow_EMEP());
        attributes.put("Qc_gapf_NEE_radtow", getQc_gapf_NEE_radtow());
        attributes.put("Qc_gapf_NEE_radtow_EMEP", getQc_gapf_NEE_radtow_EMEP());
        attributes.put("GPP_radtow", getGPP_radtow());
        attributes.put("GPP_radtow_EMEP", getGPP_radtow_EMEP());
        attributes.put("TER_radtow", getTER_radtow());
        attributes.put("TER_radtow_EMEP", getTER_radtow_EMEP());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Date samptime = (Date) attributes.get("samptime");

        if (samptime != null) {
            setSamptime(samptime);
        }

        Float H_radtow = (Float) attributes.get("H_radtow");

        if (H_radtow != null) {
            setH_radtow(H_radtow);
        }

        Integer H_radtow_EMEP = (Integer) attributes.get("H_radtow_EMEP");

        if (H_radtow_EMEP != null) {
            setH_radtow_EMEP(H_radtow_EMEP);
        }

        Integer Qc_H_radtow = (Integer) attributes.get("Qc_H_radtow");

        if (Qc_H_radtow != null) {
            setQc_H_radtow(Qc_H_radtow);
        }

        Integer Qc_H_radtow_EMEP = (Integer) attributes.get("Qc_H_radtow_EMEP");

        if (Qc_H_radtow_EMEP != null) {
            setQc_H_radtow_EMEP(Qc_H_radtow_EMEP);
        }

        Float LE_radtow = (Float) attributes.get("LE_radtow");

        if (LE_radtow != null) {
            setLE_radtow(LE_radtow);
        }

        Integer LE_radtow_EMEP = (Integer) attributes.get("LE_radtow_EMEP");

        if (LE_radtow_EMEP != null) {
            setLE_radtow_EMEP(LE_radtow_EMEP);
        }

        Integer Qc_LE_radtow = (Integer) attributes.get("Qc_LE_radtow");

        if (Qc_LE_radtow != null) {
            setQc_LE_radtow(Qc_LE_radtow);
        }

        Integer Qc_LE_radtow_EMEP = (Integer) attributes.get(
                "Qc_LE_radtow_EMEP");

        if (Qc_LE_radtow_EMEP != null) {
            setQc_LE_radtow_EMEP(Qc_LE_radtow_EMEP);
        }

        Float E_radtow = (Float) attributes.get("E_radtow");

        if (E_radtow != null) {
            setE_radtow(E_radtow);
        }

        Integer E_radtow_EMEP = (Integer) attributes.get("E_radtow_EMEP");

        if (E_radtow_EMEP != null) {
            setE_radtow_EMEP(E_radtow_EMEP);
        }

        Integer Qc_E_radtow = (Integer) attributes.get("Qc_E_radtow");

        if (Qc_E_radtow != null) {
            setQc_E_radtow(Qc_E_radtow);
        }

        Integer Qc_E_radtow_EMEP = (Integer) attributes.get("Qc_E_radtow_EMEP");

        if (Qc_E_radtow_EMEP != null) {
            setQc_E_radtow_EMEP(Qc_E_radtow_EMEP);
        }

        Float F_c_radtow = (Float) attributes.get("F_c_radtow");

        if (F_c_radtow != null) {
            setF_c_radtow(F_c_radtow);
        }

        Integer F_c_radtow_EMEP = (Integer) attributes.get("F_c_radtow_EMEP");

        if (F_c_radtow_EMEP != null) {
            setF_c_radtow_EMEP(F_c_radtow_EMEP);
        }

        Integer Qc_F_c_radtow = (Integer) attributes.get("Qc_F_c_radtow");

        if (Qc_F_c_radtow != null) {
            setQc_F_c_radtow(Qc_F_c_radtow);
        }

        Integer Qc_F_c_radtow_EMEP = (Integer) attributes.get(
                "Qc_F_c_radtow_EMEP");

        if (Qc_F_c_radtow_EMEP != null) {
            setQc_F_c_radtow_EMEP(Qc_F_c_radtow_EMEP);
        }

        Float tau_radtow = (Float) attributes.get("tau_radtow");

        if (tau_radtow != null) {
            setTau_radtow(tau_radtow);
        }

        Integer tau_radtow_EMEP = (Integer) attributes.get("tau_radtow_EMEP");

        if (tau_radtow_EMEP != null) {
            setTau_radtow_EMEP(tau_radtow_EMEP);
        }

        Integer Qc_tau_radtow = (Integer) attributes.get("Qc_tau_radtow");

        if (Qc_tau_radtow != null) {
            setQc_tau_radtow(Qc_tau_radtow);
        }

        Integer Qc_tau_radtow_EMEP = (Integer) attributes.get(
                "Qc_tau_radtow_EMEP");

        if (Qc_tau_radtow_EMEP != null) {
            setQc_tau_radtow_EMEP(Qc_tau_radtow_EMEP);
        }

        Float u_star_radtow = (Float) attributes.get("u_star_radtow");

        if (u_star_radtow != null) {
            setU_star_radtow(u_star_radtow);
        }

        Integer u_star_radtow_EMEP = (Integer) attributes.get(
                "u_star_radtow_EMEP");

        if (u_star_radtow_EMEP != null) {
            setU_star_radtow_EMEP(u_star_radtow_EMEP);
        }

        Float MO_length_radtow = (Float) attributes.get("MO_length_radtow");

        if (MO_length_radtow != null) {
            setMO_length_radtow(MO_length_radtow);
        }

        Integer MO_length_radtow_EMEP = (Integer) attributes.get(
                "MO_length_radtow_EMEP");

        if (MO_length_radtow_EMEP != null) {
            setMO_length_radtow_EMEP(MO_length_radtow_EMEP);
        }

        Float std_u_radtow = (Float) attributes.get("std_u_radtow");

        if (std_u_radtow != null) {
            setStd_u_radtow(std_u_radtow);
        }

        Integer std_u_radtow_EMEP = (Integer) attributes.get(
                "std_u_radtow_EMEP");

        if (std_u_radtow_EMEP != null) {
            setStd_u_radtow_EMEP(std_u_radtow_EMEP);
        }

        Float std_v_radtow = (Float) attributes.get("std_v_radtow");

        if (std_v_radtow != null) {
            setStd_v_radtow(std_v_radtow);
        }

        Integer std_v_radtow_EMEP = (Integer) attributes.get(
                "std_v_radtow_EMEP");

        if (std_v_radtow_EMEP != null) {
            setStd_v_radtow_EMEP(std_v_radtow_EMEP);
        }

        Float std_w_radtow = (Float) attributes.get("std_w_radtow");

        if (std_w_radtow != null) {
            setStd_w_radtow(std_w_radtow);
        }

        Integer std_w_radtow_EMEP = (Integer) attributes.get(
                "std_w_radtow_EMEP");

        if (std_w_radtow_EMEP != null) {
            setStd_w_radtow_EMEP(std_w_radtow_EMEP);
        }

        Float std_t_radtow = (Float) attributes.get("std_t_radtow");

        if (std_t_radtow != null) {
            setStd_t_radtow(std_t_radtow);
        }

        Integer std_t_radtow_EMEP = (Integer) attributes.get(
                "std_t_radtow_EMEP");

        if (std_t_radtow_EMEP != null) {
            setStd_t_radtow_EMEP(std_t_radtow_EMEP);
        }

        Float std_c_radtow = (Float) attributes.get("std_c_radtow");

        if (std_c_radtow != null) {
            setStd_c_radtow(std_c_radtow);
        }

        Integer std_c_radtow_EMEP = (Integer) attributes.get(
                "std_c_radtow_EMEP");

        if (std_c_radtow_EMEP != null) {
            setStd_c_radtow_EMEP(std_c_radtow_EMEP);
        }

        Float std_h_radtow = (Float) attributes.get("std_h_radtow");

        if (std_h_radtow != null) {
            setStd_h_radtow(std_h_radtow);
        }

        Integer std_h_radtow_EMEP = (Integer) attributes.get(
                "std_h_radtow_EMEP");

        if (std_h_radtow_EMEP != null) {
            setStd_h_radtow_EMEP(std_h_radtow_EMEP);
        }

        Float av_u_radtow = (Float) attributes.get("av_u_radtow");

        if (av_u_radtow != null) {
            setAv_u_radtow(av_u_radtow);
        }

        Integer av_u_radtow_EMEP = (Integer) attributes.get("av_u_radtow_EMEP");

        if (av_u_radtow_EMEP != null) {
            setAv_u_radtow_EMEP(av_u_radtow_EMEP);
        }

        Float av_v_radtow = (Float) attributes.get("av_v_radtow");

        if (av_v_radtow != null) {
            setAv_v_radtow(av_v_radtow);
        }

        Integer av_v_radtow_EMEP = (Integer) attributes.get("av_v_radtow_EMEP");

        if (av_v_radtow_EMEP != null) {
            setAv_v_radtow_EMEP(av_v_radtow_EMEP);
        }

        Float av_w_radtow = (Float) attributes.get("av_w_radtow");

        if (av_w_radtow != null) {
            setAv_w_radtow(av_w_radtow);
        }

        Integer av_w_radtow_EMEP = (Integer) attributes.get("av_w_radtow_EMEP");

        if (av_w_radtow_EMEP != null) {
            setAv_w_radtow_EMEP(av_w_radtow_EMEP);
        }

        Float av_t_radtow = (Float) attributes.get("av_t_radtow");

        if (av_t_radtow != null) {
            setAv_t_radtow(av_t_radtow);
        }

        Integer av_t_radtow_EMEP = (Integer) attributes.get("av_t_radtow_EMEP");

        if (av_t_radtow_EMEP != null) {
            setAv_t_radtow_EMEP(av_t_radtow_EMEP);
        }

        Float av_c_radtow = (Float) attributes.get("av_c_radtow");

        if (av_c_radtow != null) {
            setAv_c_radtow(av_c_radtow);
        }

        Integer av_c_radtow_EMEP = (Integer) attributes.get("av_c_radtow_EMEP");

        if (av_c_radtow_EMEP != null) {
            setAv_c_radtow_EMEP(av_c_radtow_EMEP);
        }

        Float av_h_radtow = (Float) attributes.get("av_h_radtow");

        if (av_h_radtow != null) {
            setAv_h_radtow(av_h_radtow);
        }

        Integer av_h_radtow_EMEP = (Integer) attributes.get("av_h_radtow_EMEP");

        if (av_h_radtow_EMEP != null) {
            setAv_h_radtow_EMEP(av_h_radtow_EMEP);
        }

        Float U_radtow = (Float) attributes.get("U_radtow");

        if (U_radtow != null) {
            setU_radtow(U_radtow);
        }

        Integer U_radtow_EMEP = (Integer) attributes.get("U_radtow_EMEP");

        if (U_radtow_EMEP != null) {
            setU_radtow_EMEP(U_radtow_EMEP);
        }

        Float wind_dir_radtow = (Float) attributes.get("wind_dir_radtow");

        if (wind_dir_radtow != null) {
            setWind_dir_radtow(wind_dir_radtow);
        }

        Integer wind_dir_radtow_EMEP = (Integer) attributes.get(
                "wind_dir_radtow_EMEP");

        if (wind_dir_radtow_EMEP != null) {
            setWind_dir_radtow_EMEP(wind_dir_radtow_EMEP);
        }

        Float eta_radtow = (Float) attributes.get("eta_radtow");

        if (eta_radtow != null) {
            setEta_radtow(eta_radtow);
        }

        Integer eta_radtow_EMEP = (Integer) attributes.get("eta_radtow_EMEP");

        if (eta_radtow_EMEP != null) {
            setEta_radtow_EMEP(eta_radtow_EMEP);
        }

        Float theta_radtow = (Float) attributes.get("theta_radtow");

        if (theta_radtow != null) {
            setTheta_radtow(theta_radtow);
        }

        Integer theta_radtow_EMEP = (Integer) attributes.get(
                "theta_radtow_EMEP");

        if (theta_radtow_EMEP != null) {
            setTheta_radtow_EMEP(theta_radtow_EMEP);
        }

        Float beta_radtow = (Float) attributes.get("beta_radtow");

        if (beta_radtow != null) {
            setBeta_radtow(beta_radtow);
        }

        Integer beta_radtow_EMEP = (Integer) attributes.get("beta_radtow_EMEP");

        if (beta_radtow_EMEP != null) {
            setBeta_radtow_EMEP(beta_radtow_EMEP);
        }

        Float c_lag_radtow = (Float) attributes.get("c_lag_radtow");

        if (c_lag_radtow != null) {
            setC_lag_radtow(c_lag_radtow);
        }

        Integer c_lag_radtow_EMEP = (Integer) attributes.get(
                "c_lag_radtow_EMEP");

        if (c_lag_radtow_EMEP != null) {
            setC_lag_radtow_EMEP(c_lag_radtow_EMEP);
        }

        Float h_lag_radtow = (Float) attributes.get("h_lag_radtow");

        if (h_lag_radtow != null) {
            setH_lag_radtow(h_lag_radtow);
        }

        Integer h_lag_radtow_EMEP = (Integer) attributes.get(
                "h_lag_radtow_EMEP");

        if (h_lag_radtow_EMEP != null) {
            setH_lag_radtow_EMEP(h_lag_radtow_EMEP);
        }

        Float err_packet_radtow = (Float) attributes.get("err_packet_radtow");

        if (err_packet_radtow != null) {
            setErr_packet_radtow(err_packet_radtow);
        }

        Integer err_packet_radtow_EMEP = (Integer) attributes.get(
                "err_packet_radtow_EMEP");

        if (err_packet_radtow_EMEP != null) {
            setErr_packet_radtow_EMEP(err_packet_radtow_EMEP);
        }

        Float licor_t_std_radtow = (Float) attributes.get("licor_t_std_radtow");

        if (licor_t_std_radtow != null) {
            setLicor_t_std_radtow(licor_t_std_radtow);
        }

        Integer licor_t_std_radtow_EMEP = (Integer) attributes.get(
                "licor_t_std_radtow_EMEP");

        if (licor_t_std_radtow_EMEP != null) {
            setLicor_t_std_radtow_EMEP(licor_t_std_radtow_EMEP);
        }

        Float licor_t_av_radtow = (Float) attributes.get("licor_t_av_radtow");

        if (licor_t_av_radtow != null) {
            setLicor_t_av_radtow(licor_t_av_radtow);
        }

        Integer licor_t_av_radtow_EMEP = (Integer) attributes.get(
                "licor_t_av_radtow_EMEP");

        if (licor_t_av_radtow_EMEP != null) {
            setLicor_t_av_radtow_EMEP(licor_t_av_radtow_EMEP);
        }

        Float licor_p_std_radtow = (Float) attributes.get("licor_p_std_radtow");

        if (licor_p_std_radtow != null) {
            setLicor_p_std_radtow(licor_p_std_radtow);
        }

        Integer licor_p_std_radtow_EMEP = (Integer) attributes.get(
                "licor_p_std_radtow_EMEP");

        if (licor_p_std_radtow_EMEP != null) {
            setLicor_p_std_radtow_EMEP(licor_p_std_radtow_EMEP);
        }

        Float licor_p_av_radtow = (Float) attributes.get("licor_p_av_radtow");

        if (licor_p_av_radtow != null) {
            setLicor_p_av_radtow(licor_p_av_radtow);
        }

        Integer licor_p_av_radtow_EMEP = (Integer) attributes.get(
                "licor_p_av_radtow_EMEP");

        if (licor_p_av_radtow_EMEP != null) {
            setLicor_p_av_radtow_EMEP(licor_p_av_radtow_EMEP);
        }

        Float F_O3_radtow = (Float) attributes.get("F_O3_radtow");

        if (F_O3_radtow != null) {
            setF_O3_radtow(F_O3_radtow);
        }

        Integer F_O3_radtow_EMEP = (Integer) attributes.get("F_O3_radtow_EMEP");

        if (F_O3_radtow_EMEP != null) {
            setF_O3_radtow_EMEP(F_O3_radtow_EMEP);
        }

        Integer Qc_F_O3_radtow = (Integer) attributes.get("Qc_F_O3_radtow");

        if (Qc_F_O3_radtow != null) {
            setQc_F_O3_radtow(Qc_F_O3_radtow);
        }

        Integer Qc_F_O3_radtow_EMEP = (Integer) attributes.get(
                "Qc_F_O3_radtow_EMEP");

        if (Qc_F_O3_radtow_EMEP != null) {
            setQc_F_O3_radtow_EMEP(Qc_F_O3_radtow_EMEP);
        }

        Float std_O3_radtow = (Float) attributes.get("std_O3_radtow");

        if (std_O3_radtow != null) {
            setStd_O3_radtow(std_O3_radtow);
        }

        Integer std_O3_radtow_EMEP = (Integer) attributes.get(
                "std_O3_radtow_EMEP");

        if (std_O3_radtow_EMEP != null) {
            setStd_O3_radtow_EMEP(std_O3_radtow_EMEP);
        }

        Float av_O3_radtow = (Float) attributes.get("av_O3_radtow");

        if (av_O3_radtow != null) {
            setAv_O3_radtow(av_O3_radtow);
        }

        Integer av_O3_radtow_EMEP = (Integer) attributes.get(
                "av_O3_radtow_EMEP");

        if (av_O3_radtow_EMEP != null) {
            setAv_O3_radtow_EMEP(av_O3_radtow_EMEP);
        }

        Float O3_lag_radtow = (Float) attributes.get("O3_lag_radtow");

        if (O3_lag_radtow != null) {
            setO3_lag_radtow(O3_lag_radtow);
        }

        Integer O3_lag_radtow_EMEP = (Integer) attributes.get(
                "O3_lag_radtow_EMEP");

        if (O3_lag_radtow_EMEP != null) {
            setO3_lag_radtow_EMEP(O3_lag_radtow_EMEP);
        }

        Float NEE_radtow = (Float) attributes.get("NEE_radtow");

        if (NEE_radtow != null) {
            setNEE_radtow(NEE_radtow);
        }

        Integer NEE_radtow_EMEP = (Integer) attributes.get("NEE_radtow_EMEP");

        if (NEE_radtow_EMEP != null) {
            setNEE_radtow_EMEP(NEE_radtow_EMEP);
        }

        Integer Qc_gapf_NEE_radtow = (Integer) attributes.get(
                "Qc_gapf_NEE_radtow");

        if (Qc_gapf_NEE_radtow != null) {
            setQc_gapf_NEE_radtow(Qc_gapf_NEE_radtow);
        }

        Integer Qc_gapf_NEE_radtow_EMEP = (Integer) attributes.get(
                "Qc_gapf_NEE_radtow_EMEP");

        if (Qc_gapf_NEE_radtow_EMEP != null) {
            setQc_gapf_NEE_radtow_EMEP(Qc_gapf_NEE_radtow_EMEP);
        }

        Float GPP_radtow = (Float) attributes.get("GPP_radtow");

        if (GPP_radtow != null) {
            setGPP_radtow(GPP_radtow);
        }

        Integer GPP_radtow_EMEP = (Integer) attributes.get("GPP_radtow_EMEP");

        if (GPP_radtow_EMEP != null) {
            setGPP_radtow_EMEP(GPP_radtow_EMEP);
        }

        Float TER_radtow = (Float) attributes.get("TER_radtow");

        if (TER_radtow != null) {
            setTER_radtow(TER_radtow);
        }

        Integer TER_radtow_EMEP = (Integer) attributes.get("TER_radtow_EMEP");

        if (TER_radtow_EMEP != null) {
            setTER_radtow_EMEP(TER_radtow_EMEP);
        }
    }

    @JSON
    @Override
    public Date getSamptime() {
        return _samptime;
    }

    @Override
    public void setSamptime(Date samptime) {
        _samptime = samptime;
    }

    @JSON
    @Override
    public float getH_radtow() {
        return _H_radtow;
    }

    @Override
    public void setH_radtow(float H_radtow) {
        _H_radtow = H_radtow;
    }

    @JSON
    @Override
    public int getH_radtow_EMEP() {
        return _H_radtow_EMEP;
    }

    @Override
    public void setH_radtow_EMEP(int H_radtow_EMEP) {
        _H_radtow_EMEP = H_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_H_radtow() {
        return _Qc_H_radtow;
    }

    @Override
    public void setQc_H_radtow(int Qc_H_radtow) {
        _Qc_H_radtow = Qc_H_radtow;
    }

    @JSON
    @Override
    public int getQc_H_radtow_EMEP() {
        return _Qc_H_radtow_EMEP;
    }

    @Override
    public void setQc_H_radtow_EMEP(int Qc_H_radtow_EMEP) {
        _Qc_H_radtow_EMEP = Qc_H_radtow_EMEP;
    }

    @JSON
    @Override
    public float getLE_radtow() {
        return _LE_radtow;
    }

    @Override
    public void setLE_radtow(float LE_radtow) {
        _LE_radtow = LE_radtow;
    }

    @JSON
    @Override
    public int getLE_radtow_EMEP() {
        return _LE_radtow_EMEP;
    }

    @Override
    public void setLE_radtow_EMEP(int LE_radtow_EMEP) {
        _LE_radtow_EMEP = LE_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_LE_radtow() {
        return _Qc_LE_radtow;
    }

    @Override
    public void setQc_LE_radtow(int Qc_LE_radtow) {
        _Qc_LE_radtow = Qc_LE_radtow;
    }

    @JSON
    @Override
    public int getQc_LE_radtow_EMEP() {
        return _Qc_LE_radtow_EMEP;
    }

    @Override
    public void setQc_LE_radtow_EMEP(int Qc_LE_radtow_EMEP) {
        _Qc_LE_radtow_EMEP = Qc_LE_radtow_EMEP;
    }

    @JSON
    @Override
    public float getE_radtow() {
        return _E_radtow;
    }

    @Override
    public void setE_radtow(float E_radtow) {
        _E_radtow = E_radtow;
    }

    @JSON
    @Override
    public int getE_radtow_EMEP() {
        return _E_radtow_EMEP;
    }

    @Override
    public void setE_radtow_EMEP(int E_radtow_EMEP) {
        _E_radtow_EMEP = E_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_E_radtow() {
        return _Qc_E_radtow;
    }

    @Override
    public void setQc_E_radtow(int Qc_E_radtow) {
        _Qc_E_radtow = Qc_E_radtow;
    }

    @JSON
    @Override
    public int getQc_E_radtow_EMEP() {
        return _Qc_E_radtow_EMEP;
    }

    @Override
    public void setQc_E_radtow_EMEP(int Qc_E_radtow_EMEP) {
        _Qc_E_radtow_EMEP = Qc_E_radtow_EMEP;
    }

    @JSON
    @Override
    public float getF_c_radtow() {
        return _F_c_radtow;
    }

    @Override
    public void setF_c_radtow(float F_c_radtow) {
        _F_c_radtow = F_c_radtow;
    }

    @JSON
    @Override
    public int getF_c_radtow_EMEP() {
        return _F_c_radtow_EMEP;
    }

    @Override
    public void setF_c_radtow_EMEP(int F_c_radtow_EMEP) {
        _F_c_radtow_EMEP = F_c_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_F_c_radtow() {
        return _Qc_F_c_radtow;
    }

    @Override
    public void setQc_F_c_radtow(int Qc_F_c_radtow) {
        _Qc_F_c_radtow = Qc_F_c_radtow;
    }

    @JSON
    @Override
    public int getQc_F_c_radtow_EMEP() {
        return _Qc_F_c_radtow_EMEP;
    }

    @Override
    public void setQc_F_c_radtow_EMEP(int Qc_F_c_radtow_EMEP) {
        _Qc_F_c_radtow_EMEP = Qc_F_c_radtow_EMEP;
    }

    @JSON
    @Override
    public float getTau_radtow() {
        return _tau_radtow;
    }

    @Override
    public void setTau_radtow(float tau_radtow) {
        _tau_radtow = tau_radtow;
    }

    @JSON
    @Override
    public int getTau_radtow_EMEP() {
        return _tau_radtow_EMEP;
    }

    @Override
    public void setTau_radtow_EMEP(int tau_radtow_EMEP) {
        _tau_radtow_EMEP = tau_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_tau_radtow() {
        return _Qc_tau_radtow;
    }

    @Override
    public void setQc_tau_radtow(int Qc_tau_radtow) {
        _Qc_tau_radtow = Qc_tau_radtow;
    }

    @JSON
    @Override
    public int getQc_tau_radtow_EMEP() {
        return _Qc_tau_radtow_EMEP;
    }

    @Override
    public void setQc_tau_radtow_EMEP(int Qc_tau_radtow_EMEP) {
        _Qc_tau_radtow_EMEP = Qc_tau_radtow_EMEP;
    }

    @JSON
    @Override
    public float getU_star_radtow() {
        return _u_star_radtow;
    }

    @Override
    public void setU_star_radtow(float u_star_radtow) {
        _u_star_radtow = u_star_radtow;
    }

    @JSON
    @Override
    public int getU_star_radtow_EMEP() {
        return _u_star_radtow_EMEP;
    }

    @Override
    public void setU_star_radtow_EMEP(int u_star_radtow_EMEP) {
        _u_star_radtow_EMEP = u_star_radtow_EMEP;
    }

    @JSON
    @Override
    public float getMO_length_radtow() {
        return _MO_length_radtow;
    }

    @Override
    public void setMO_length_radtow(float MO_length_radtow) {
        _MO_length_radtow = MO_length_radtow;
    }

    @JSON
    @Override
    public int getMO_length_radtow_EMEP() {
        return _MO_length_radtow_EMEP;
    }

    @Override
    public void setMO_length_radtow_EMEP(int MO_length_radtow_EMEP) {
        _MO_length_radtow_EMEP = MO_length_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_u_radtow() {
        return _std_u_radtow;
    }

    @Override
    public void setStd_u_radtow(float std_u_radtow) {
        _std_u_radtow = std_u_radtow;
    }

    @JSON
    @Override
    public int getStd_u_radtow_EMEP() {
        return _std_u_radtow_EMEP;
    }

    @Override
    public void setStd_u_radtow_EMEP(int std_u_radtow_EMEP) {
        _std_u_radtow_EMEP = std_u_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_v_radtow() {
        return _std_v_radtow;
    }

    @Override
    public void setStd_v_radtow(float std_v_radtow) {
        _std_v_radtow = std_v_radtow;
    }

    @JSON
    @Override
    public int getStd_v_radtow_EMEP() {
        return _std_v_radtow_EMEP;
    }

    @Override
    public void setStd_v_radtow_EMEP(int std_v_radtow_EMEP) {
        _std_v_radtow_EMEP = std_v_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_w_radtow() {
        return _std_w_radtow;
    }

    @Override
    public void setStd_w_radtow(float std_w_radtow) {
        _std_w_radtow = std_w_radtow;
    }

    @JSON
    @Override
    public int getStd_w_radtow_EMEP() {
        return _std_w_radtow_EMEP;
    }

    @Override
    public void setStd_w_radtow_EMEP(int std_w_radtow_EMEP) {
        _std_w_radtow_EMEP = std_w_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_t_radtow() {
        return _std_t_radtow;
    }

    @Override
    public void setStd_t_radtow(float std_t_radtow) {
        _std_t_radtow = std_t_radtow;
    }

    @JSON
    @Override
    public int getStd_t_radtow_EMEP() {
        return _std_t_radtow_EMEP;
    }

    @Override
    public void setStd_t_radtow_EMEP(int std_t_radtow_EMEP) {
        _std_t_radtow_EMEP = std_t_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_c_radtow() {
        return _std_c_radtow;
    }

    @Override
    public void setStd_c_radtow(float std_c_radtow) {
        _std_c_radtow = std_c_radtow;
    }

    @JSON
    @Override
    public int getStd_c_radtow_EMEP() {
        return _std_c_radtow_EMEP;
    }

    @Override
    public void setStd_c_radtow_EMEP(int std_c_radtow_EMEP) {
        _std_c_radtow_EMEP = std_c_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_h_radtow() {
        return _std_h_radtow;
    }

    @Override
    public void setStd_h_radtow(float std_h_radtow) {
        _std_h_radtow = std_h_radtow;
    }

    @JSON
    @Override
    public int getStd_h_radtow_EMEP() {
        return _std_h_radtow_EMEP;
    }

    @Override
    public void setStd_h_radtow_EMEP(int std_h_radtow_EMEP) {
        _std_h_radtow_EMEP = std_h_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_u_radtow() {
        return _av_u_radtow;
    }

    @Override
    public void setAv_u_radtow(float av_u_radtow) {
        _av_u_radtow = av_u_radtow;
    }

    @JSON
    @Override
    public int getAv_u_radtow_EMEP() {
        return _av_u_radtow_EMEP;
    }

    @Override
    public void setAv_u_radtow_EMEP(int av_u_radtow_EMEP) {
        _av_u_radtow_EMEP = av_u_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_v_radtow() {
        return _av_v_radtow;
    }

    @Override
    public void setAv_v_radtow(float av_v_radtow) {
        _av_v_radtow = av_v_radtow;
    }

    @JSON
    @Override
    public int getAv_v_radtow_EMEP() {
        return _av_v_radtow_EMEP;
    }

    @Override
    public void setAv_v_radtow_EMEP(int av_v_radtow_EMEP) {
        _av_v_radtow_EMEP = av_v_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_w_radtow() {
        return _av_w_radtow;
    }

    @Override
    public void setAv_w_radtow(float av_w_radtow) {
        _av_w_radtow = av_w_radtow;
    }

    @JSON
    @Override
    public int getAv_w_radtow_EMEP() {
        return _av_w_radtow_EMEP;
    }

    @Override
    public void setAv_w_radtow_EMEP(int av_w_radtow_EMEP) {
        _av_w_radtow_EMEP = av_w_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_t_radtow() {
        return _av_t_radtow;
    }

    @Override
    public void setAv_t_radtow(float av_t_radtow) {
        _av_t_radtow = av_t_radtow;
    }

    @JSON
    @Override
    public int getAv_t_radtow_EMEP() {
        return _av_t_radtow_EMEP;
    }

    @Override
    public void setAv_t_radtow_EMEP(int av_t_radtow_EMEP) {
        _av_t_radtow_EMEP = av_t_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_c_radtow() {
        return _av_c_radtow;
    }

    @Override
    public void setAv_c_radtow(float av_c_radtow) {
        _av_c_radtow = av_c_radtow;
    }

    @JSON
    @Override
    public int getAv_c_radtow_EMEP() {
        return _av_c_radtow_EMEP;
    }

    @Override
    public void setAv_c_radtow_EMEP(int av_c_radtow_EMEP) {
        _av_c_radtow_EMEP = av_c_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_h_radtow() {
        return _av_h_radtow;
    }

    @Override
    public void setAv_h_radtow(float av_h_radtow) {
        _av_h_radtow = av_h_radtow;
    }

    @JSON
    @Override
    public int getAv_h_radtow_EMEP() {
        return _av_h_radtow_EMEP;
    }

    @Override
    public void setAv_h_radtow_EMEP(int av_h_radtow_EMEP) {
        _av_h_radtow_EMEP = av_h_radtow_EMEP;
    }

    @JSON
    @Override
    public float getU_radtow() {
        return _U_radtow;
    }

    @Override
    public void setU_radtow(float U_radtow) {
        _U_radtow = U_radtow;
    }

    @JSON
    @Override
    public int getU_radtow_EMEP() {
        return _U_radtow_EMEP;
    }

    @Override
    public void setU_radtow_EMEP(int U_radtow_EMEP) {
        _U_radtow_EMEP = U_radtow_EMEP;
    }

    @JSON
    @Override
    public float getWind_dir_radtow() {
        return _wind_dir_radtow;
    }

    @Override
    public void setWind_dir_radtow(float wind_dir_radtow) {
        _wind_dir_radtow = wind_dir_radtow;
    }

    @JSON
    @Override
    public int getWind_dir_radtow_EMEP() {
        return _wind_dir_radtow_EMEP;
    }

    @Override
    public void setWind_dir_radtow_EMEP(int wind_dir_radtow_EMEP) {
        _wind_dir_radtow_EMEP = wind_dir_radtow_EMEP;
    }

    @JSON
    @Override
    public float getEta_radtow() {
        return _eta_radtow;
    }

    @Override
    public void setEta_radtow(float eta_radtow) {
        _eta_radtow = eta_radtow;
    }

    @JSON
    @Override
    public int getEta_radtow_EMEP() {
        return _eta_radtow_EMEP;
    }

    @Override
    public void setEta_radtow_EMEP(int eta_radtow_EMEP) {
        _eta_radtow_EMEP = eta_radtow_EMEP;
    }

    @JSON
    @Override
    public float getTheta_radtow() {
        return _theta_radtow;
    }

    @Override
    public void setTheta_radtow(float theta_radtow) {
        _theta_radtow = theta_radtow;
    }

    @JSON
    @Override
    public int getTheta_radtow_EMEP() {
        return _theta_radtow_EMEP;
    }

    @Override
    public void setTheta_radtow_EMEP(int theta_radtow_EMEP) {
        _theta_radtow_EMEP = theta_radtow_EMEP;
    }

    @JSON
    @Override
    public float getBeta_radtow() {
        return _beta_radtow;
    }

    @Override
    public void setBeta_radtow(float beta_radtow) {
        _beta_radtow = beta_radtow;
    }

    @JSON
    @Override
    public int getBeta_radtow_EMEP() {
        return _beta_radtow_EMEP;
    }

    @Override
    public void setBeta_radtow_EMEP(int beta_radtow_EMEP) {
        _beta_radtow_EMEP = beta_radtow_EMEP;
    }

    @JSON
    @Override
    public float getC_lag_radtow() {
        return _c_lag_radtow;
    }

    @Override
    public void setC_lag_radtow(float c_lag_radtow) {
        _c_lag_radtow = c_lag_radtow;
    }

    @JSON
    @Override
    public int getC_lag_radtow_EMEP() {
        return _c_lag_radtow_EMEP;
    }

    @Override
    public void setC_lag_radtow_EMEP(int c_lag_radtow_EMEP) {
        _c_lag_radtow_EMEP = c_lag_radtow_EMEP;
    }

    @JSON
    @Override
    public float getH_lag_radtow() {
        return _h_lag_radtow;
    }

    @Override
    public void setH_lag_radtow(float h_lag_radtow) {
        _h_lag_radtow = h_lag_radtow;
    }

    @JSON
    @Override
    public int getH_lag_radtow_EMEP() {
        return _h_lag_radtow_EMEP;
    }

    @Override
    public void setH_lag_radtow_EMEP(int h_lag_radtow_EMEP) {
        _h_lag_radtow_EMEP = h_lag_radtow_EMEP;
    }

    @JSON
    @Override
    public float getErr_packet_radtow() {
        return _err_packet_radtow;
    }

    @Override
    public void setErr_packet_radtow(float err_packet_radtow) {
        _err_packet_radtow = err_packet_radtow;
    }

    @JSON
    @Override
    public int getErr_packet_radtow_EMEP() {
        return _err_packet_radtow_EMEP;
    }

    @Override
    public void setErr_packet_radtow_EMEP(int err_packet_radtow_EMEP) {
        _err_packet_radtow_EMEP = err_packet_radtow_EMEP;
    }

    @JSON
    @Override
    public float getLicor_t_std_radtow() {
        return _licor_t_std_radtow;
    }

    @Override
    public void setLicor_t_std_radtow(float licor_t_std_radtow) {
        _licor_t_std_radtow = licor_t_std_radtow;
    }

    @JSON
    @Override
    public int getLicor_t_std_radtow_EMEP() {
        return _licor_t_std_radtow_EMEP;
    }

    @Override
    public void setLicor_t_std_radtow_EMEP(int licor_t_std_radtow_EMEP) {
        _licor_t_std_radtow_EMEP = licor_t_std_radtow_EMEP;
    }

    @JSON
    @Override
    public float getLicor_t_av_radtow() {
        return _licor_t_av_radtow;
    }

    @Override
    public void setLicor_t_av_radtow(float licor_t_av_radtow) {
        _licor_t_av_radtow = licor_t_av_radtow;
    }

    @JSON
    @Override
    public int getLicor_t_av_radtow_EMEP() {
        return _licor_t_av_radtow_EMEP;
    }

    @Override
    public void setLicor_t_av_radtow_EMEP(int licor_t_av_radtow_EMEP) {
        _licor_t_av_radtow_EMEP = licor_t_av_radtow_EMEP;
    }

    @JSON
    @Override
    public float getLicor_p_std_radtow() {
        return _licor_p_std_radtow;
    }

    @Override
    public void setLicor_p_std_radtow(float licor_p_std_radtow) {
        _licor_p_std_radtow = licor_p_std_radtow;
    }

    @JSON
    @Override
    public int getLicor_p_std_radtow_EMEP() {
        return _licor_p_std_radtow_EMEP;
    }

    @Override
    public void setLicor_p_std_radtow_EMEP(int licor_p_std_radtow_EMEP) {
        _licor_p_std_radtow_EMEP = licor_p_std_radtow_EMEP;
    }

    @JSON
    @Override
    public float getLicor_p_av_radtow() {
        return _licor_p_av_radtow;
    }

    @Override
    public void setLicor_p_av_radtow(float licor_p_av_radtow) {
        _licor_p_av_radtow = licor_p_av_radtow;
    }

    @JSON
    @Override
    public int getLicor_p_av_radtow_EMEP() {
        return _licor_p_av_radtow_EMEP;
    }

    @Override
    public void setLicor_p_av_radtow_EMEP(int licor_p_av_radtow_EMEP) {
        _licor_p_av_radtow_EMEP = licor_p_av_radtow_EMEP;
    }

    @JSON
    @Override
    public float getF_O3_radtow() {
        return _F_O3_radtow;
    }

    @Override
    public void setF_O3_radtow(float F_O3_radtow) {
        _F_O3_radtow = F_O3_radtow;
    }

    @JSON
    @Override
    public int getF_O3_radtow_EMEP() {
        return _F_O3_radtow_EMEP;
    }

    @Override
    public void setF_O3_radtow_EMEP(int F_O3_radtow_EMEP) {
        _F_O3_radtow_EMEP = F_O3_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_F_O3_radtow() {
        return _Qc_F_O3_radtow;
    }

    @Override
    public void setQc_F_O3_radtow(int Qc_F_O3_radtow) {
        _Qc_F_O3_radtow = Qc_F_O3_radtow;
    }

    @JSON
    @Override
    public int getQc_F_O3_radtow_EMEP() {
        return _Qc_F_O3_radtow_EMEP;
    }

    @Override
    public void setQc_F_O3_radtow_EMEP(int Qc_F_O3_radtow_EMEP) {
        _Qc_F_O3_radtow_EMEP = Qc_F_O3_radtow_EMEP;
    }

    @JSON
    @Override
    public float getStd_O3_radtow() {
        return _std_O3_radtow;
    }

    @Override
    public void setStd_O3_radtow(float std_O3_radtow) {
        _std_O3_radtow = std_O3_radtow;
    }

    @JSON
    @Override
    public int getStd_O3_radtow_EMEP() {
        return _std_O3_radtow_EMEP;
    }

    @Override
    public void setStd_O3_radtow_EMEP(int std_O3_radtow_EMEP) {
        _std_O3_radtow_EMEP = std_O3_radtow_EMEP;
    }

    @JSON
    @Override
    public float getAv_O3_radtow() {
        return _av_O3_radtow;
    }

    @Override
    public void setAv_O3_radtow(float av_O3_radtow) {
        _av_O3_radtow = av_O3_radtow;
    }

    @JSON
    @Override
    public int getAv_O3_radtow_EMEP() {
        return _av_O3_radtow_EMEP;
    }

    @Override
    public void setAv_O3_radtow_EMEP(int av_O3_radtow_EMEP) {
        _av_O3_radtow_EMEP = av_O3_radtow_EMEP;
    }

    @JSON
    @Override
    public float getO3_lag_radtow() {
        return _O3_lag_radtow;
    }

    @Override
    public void setO3_lag_radtow(float O3_lag_radtow) {
        _O3_lag_radtow = O3_lag_radtow;
    }

    @JSON
    @Override
    public int getO3_lag_radtow_EMEP() {
        return _O3_lag_radtow_EMEP;
    }

    @Override
    public void setO3_lag_radtow_EMEP(int O3_lag_radtow_EMEP) {
        _O3_lag_radtow_EMEP = O3_lag_radtow_EMEP;
    }

    @JSON
    @Override
    public float getNEE_radtow() {
        return _NEE_radtow;
    }

    @Override
    public void setNEE_radtow(float NEE_radtow) {
        _NEE_radtow = NEE_radtow;
    }

    @JSON
    @Override
    public int getNEE_radtow_EMEP() {
        return _NEE_radtow_EMEP;
    }

    @Override
    public void setNEE_radtow_EMEP(int NEE_radtow_EMEP) {
        _NEE_radtow_EMEP = NEE_radtow_EMEP;
    }

    @JSON
    @Override
    public int getQc_gapf_NEE_radtow() {
        return _Qc_gapf_NEE_radtow;
    }

    @Override
    public void setQc_gapf_NEE_radtow(int Qc_gapf_NEE_radtow) {
        _Qc_gapf_NEE_radtow = Qc_gapf_NEE_radtow;
    }

    @JSON
    @Override
    public int getQc_gapf_NEE_radtow_EMEP() {
        return _Qc_gapf_NEE_radtow_EMEP;
    }

    @Override
    public void setQc_gapf_NEE_radtow_EMEP(int Qc_gapf_NEE_radtow_EMEP) {
        _Qc_gapf_NEE_radtow_EMEP = Qc_gapf_NEE_radtow_EMEP;
    }

    @JSON
    @Override
    public float getGPP_radtow() {
        return _GPP_radtow;
    }

    @Override
    public void setGPP_radtow(float GPP_radtow) {
        _GPP_radtow = GPP_radtow;
    }

    @JSON
    @Override
    public int getGPP_radtow_EMEP() {
        return _GPP_radtow_EMEP;
    }

    @Override
    public void setGPP_radtow_EMEP(int GPP_radtow_EMEP) {
        _GPP_radtow_EMEP = GPP_radtow_EMEP;
    }

    @JSON
    @Override
    public float getTER_radtow() {
        return _TER_radtow;
    }

    @Override
    public void setTER_radtow(float TER_radtow) {
        _TER_radtow = TER_radtow;
    }

    @JSON
    @Override
    public int getTER_radtow_EMEP() {
        return _TER_radtow_EMEP;
    }

    @Override
    public void setTER_radtow_EMEP(int TER_radtow_EMEP) {
        _TER_radtow_EMEP = TER_radtow_EMEP;
    }

    @Override
    public Hyde_eddytow toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Hyde_eddytow) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Hyde_eddytowImpl hyde_eddytowImpl = new Hyde_eddytowImpl();

        hyde_eddytowImpl.setSamptime(getSamptime());
        hyde_eddytowImpl.setH_radtow(getH_radtow());
        hyde_eddytowImpl.setH_radtow_EMEP(getH_radtow_EMEP());
        hyde_eddytowImpl.setQc_H_radtow(getQc_H_radtow());
        hyde_eddytowImpl.setQc_H_radtow_EMEP(getQc_H_radtow_EMEP());
        hyde_eddytowImpl.setLE_radtow(getLE_radtow());
        hyde_eddytowImpl.setLE_radtow_EMEP(getLE_radtow_EMEP());
        hyde_eddytowImpl.setQc_LE_radtow(getQc_LE_radtow());
        hyde_eddytowImpl.setQc_LE_radtow_EMEP(getQc_LE_radtow_EMEP());
        hyde_eddytowImpl.setE_radtow(getE_radtow());
        hyde_eddytowImpl.setE_radtow_EMEP(getE_radtow_EMEP());
        hyde_eddytowImpl.setQc_E_radtow(getQc_E_radtow());
        hyde_eddytowImpl.setQc_E_radtow_EMEP(getQc_E_radtow_EMEP());
        hyde_eddytowImpl.setF_c_radtow(getF_c_radtow());
        hyde_eddytowImpl.setF_c_radtow_EMEP(getF_c_radtow_EMEP());
        hyde_eddytowImpl.setQc_F_c_radtow(getQc_F_c_radtow());
        hyde_eddytowImpl.setQc_F_c_radtow_EMEP(getQc_F_c_radtow_EMEP());
        hyde_eddytowImpl.setTau_radtow(getTau_radtow());
        hyde_eddytowImpl.setTau_radtow_EMEP(getTau_radtow_EMEP());
        hyde_eddytowImpl.setQc_tau_radtow(getQc_tau_radtow());
        hyde_eddytowImpl.setQc_tau_radtow_EMEP(getQc_tau_radtow_EMEP());
        hyde_eddytowImpl.setU_star_radtow(getU_star_radtow());
        hyde_eddytowImpl.setU_star_radtow_EMEP(getU_star_radtow_EMEP());
        hyde_eddytowImpl.setMO_length_radtow(getMO_length_radtow());
        hyde_eddytowImpl.setMO_length_radtow_EMEP(getMO_length_radtow_EMEP());
        hyde_eddytowImpl.setStd_u_radtow(getStd_u_radtow());
        hyde_eddytowImpl.setStd_u_radtow_EMEP(getStd_u_radtow_EMEP());
        hyde_eddytowImpl.setStd_v_radtow(getStd_v_radtow());
        hyde_eddytowImpl.setStd_v_radtow_EMEP(getStd_v_radtow_EMEP());
        hyde_eddytowImpl.setStd_w_radtow(getStd_w_radtow());
        hyde_eddytowImpl.setStd_w_radtow_EMEP(getStd_w_radtow_EMEP());
        hyde_eddytowImpl.setStd_t_radtow(getStd_t_radtow());
        hyde_eddytowImpl.setStd_t_radtow_EMEP(getStd_t_radtow_EMEP());
        hyde_eddytowImpl.setStd_c_radtow(getStd_c_radtow());
        hyde_eddytowImpl.setStd_c_radtow_EMEP(getStd_c_radtow_EMEP());
        hyde_eddytowImpl.setStd_h_radtow(getStd_h_radtow());
        hyde_eddytowImpl.setStd_h_radtow_EMEP(getStd_h_radtow_EMEP());
        hyde_eddytowImpl.setAv_u_radtow(getAv_u_radtow());
        hyde_eddytowImpl.setAv_u_radtow_EMEP(getAv_u_radtow_EMEP());
        hyde_eddytowImpl.setAv_v_radtow(getAv_v_radtow());
        hyde_eddytowImpl.setAv_v_radtow_EMEP(getAv_v_radtow_EMEP());
        hyde_eddytowImpl.setAv_w_radtow(getAv_w_radtow());
        hyde_eddytowImpl.setAv_w_radtow_EMEP(getAv_w_radtow_EMEP());
        hyde_eddytowImpl.setAv_t_radtow(getAv_t_radtow());
        hyde_eddytowImpl.setAv_t_radtow_EMEP(getAv_t_radtow_EMEP());
        hyde_eddytowImpl.setAv_c_radtow(getAv_c_radtow());
        hyde_eddytowImpl.setAv_c_radtow_EMEP(getAv_c_radtow_EMEP());
        hyde_eddytowImpl.setAv_h_radtow(getAv_h_radtow());
        hyde_eddytowImpl.setAv_h_radtow_EMEP(getAv_h_radtow_EMEP());
        hyde_eddytowImpl.setU_radtow(getU_radtow());
        hyde_eddytowImpl.setU_radtow_EMEP(getU_radtow_EMEP());
        hyde_eddytowImpl.setWind_dir_radtow(getWind_dir_radtow());
        hyde_eddytowImpl.setWind_dir_radtow_EMEP(getWind_dir_radtow_EMEP());
        hyde_eddytowImpl.setEta_radtow(getEta_radtow());
        hyde_eddytowImpl.setEta_radtow_EMEP(getEta_radtow_EMEP());
        hyde_eddytowImpl.setTheta_radtow(getTheta_radtow());
        hyde_eddytowImpl.setTheta_radtow_EMEP(getTheta_radtow_EMEP());
        hyde_eddytowImpl.setBeta_radtow(getBeta_radtow());
        hyde_eddytowImpl.setBeta_radtow_EMEP(getBeta_radtow_EMEP());
        hyde_eddytowImpl.setC_lag_radtow(getC_lag_radtow());
        hyde_eddytowImpl.setC_lag_radtow_EMEP(getC_lag_radtow_EMEP());
        hyde_eddytowImpl.setH_lag_radtow(getH_lag_radtow());
        hyde_eddytowImpl.setH_lag_radtow_EMEP(getH_lag_radtow_EMEP());
        hyde_eddytowImpl.setErr_packet_radtow(getErr_packet_radtow());
        hyde_eddytowImpl.setErr_packet_radtow_EMEP(getErr_packet_radtow_EMEP());
        hyde_eddytowImpl.setLicor_t_std_radtow(getLicor_t_std_radtow());
        hyde_eddytowImpl.setLicor_t_std_radtow_EMEP(getLicor_t_std_radtow_EMEP());
        hyde_eddytowImpl.setLicor_t_av_radtow(getLicor_t_av_radtow());
        hyde_eddytowImpl.setLicor_t_av_radtow_EMEP(getLicor_t_av_radtow_EMEP());
        hyde_eddytowImpl.setLicor_p_std_radtow(getLicor_p_std_radtow());
        hyde_eddytowImpl.setLicor_p_std_radtow_EMEP(getLicor_p_std_radtow_EMEP());
        hyde_eddytowImpl.setLicor_p_av_radtow(getLicor_p_av_radtow());
        hyde_eddytowImpl.setLicor_p_av_radtow_EMEP(getLicor_p_av_radtow_EMEP());
        hyde_eddytowImpl.setF_O3_radtow(getF_O3_radtow());
        hyde_eddytowImpl.setF_O3_radtow_EMEP(getF_O3_radtow_EMEP());
        hyde_eddytowImpl.setQc_F_O3_radtow(getQc_F_O3_radtow());
        hyde_eddytowImpl.setQc_F_O3_radtow_EMEP(getQc_F_O3_radtow_EMEP());
        hyde_eddytowImpl.setStd_O3_radtow(getStd_O3_radtow());
        hyde_eddytowImpl.setStd_O3_radtow_EMEP(getStd_O3_radtow_EMEP());
        hyde_eddytowImpl.setAv_O3_radtow(getAv_O3_radtow());
        hyde_eddytowImpl.setAv_O3_radtow_EMEP(getAv_O3_radtow_EMEP());
        hyde_eddytowImpl.setO3_lag_radtow(getO3_lag_radtow());
        hyde_eddytowImpl.setO3_lag_radtow_EMEP(getO3_lag_radtow_EMEP());
        hyde_eddytowImpl.setNEE_radtow(getNEE_radtow());
        hyde_eddytowImpl.setNEE_radtow_EMEP(getNEE_radtow_EMEP());
        hyde_eddytowImpl.setQc_gapf_NEE_radtow(getQc_gapf_NEE_radtow());
        hyde_eddytowImpl.setQc_gapf_NEE_radtow_EMEP(getQc_gapf_NEE_radtow_EMEP());
        hyde_eddytowImpl.setGPP_radtow(getGPP_radtow());
        hyde_eddytowImpl.setGPP_radtow_EMEP(getGPP_radtow_EMEP());
        hyde_eddytowImpl.setTER_radtow(getTER_radtow());
        hyde_eddytowImpl.setTER_radtow_EMEP(getTER_radtow_EMEP());

        hyde_eddytowImpl.resetOriginalValues();

        return hyde_eddytowImpl;
    }

    @Override
    public int compareTo(Hyde_eddytow hyde_eddytow) {
        java.util.Date primaryKey = hyde_eddytow.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Hyde_eddytow)) {
            return false;
        }

        Hyde_eddytow hyde_eddytow = (Hyde_eddytow) obj;

        java.util.Date primaryKey = hyde_eddytow.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Hyde_eddytow> toCacheModel() {
        Hyde_eddytowCacheModel hyde_eddytowCacheModel = new Hyde_eddytowCacheModel();

        Date samptime = getSamptime();

        if (samptime != null) {
            hyde_eddytowCacheModel.samptime = samptime.getTime();
        } else {
            hyde_eddytowCacheModel.samptime = Long.MIN_VALUE;
        }

        hyde_eddytowCacheModel.H_radtow = getH_radtow();

        hyde_eddytowCacheModel.H_radtow_EMEP = getH_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_H_radtow = getQc_H_radtow();

        hyde_eddytowCacheModel.Qc_H_radtow_EMEP = getQc_H_radtow_EMEP();

        hyde_eddytowCacheModel.LE_radtow = getLE_radtow();

        hyde_eddytowCacheModel.LE_radtow_EMEP = getLE_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_LE_radtow = getQc_LE_radtow();

        hyde_eddytowCacheModel.Qc_LE_radtow_EMEP = getQc_LE_radtow_EMEP();

        hyde_eddytowCacheModel.E_radtow = getE_radtow();

        hyde_eddytowCacheModel.E_radtow_EMEP = getE_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_E_radtow = getQc_E_radtow();

        hyde_eddytowCacheModel.Qc_E_radtow_EMEP = getQc_E_radtow_EMEP();

        hyde_eddytowCacheModel.F_c_radtow = getF_c_radtow();

        hyde_eddytowCacheModel.F_c_radtow_EMEP = getF_c_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_F_c_radtow = getQc_F_c_radtow();

        hyde_eddytowCacheModel.Qc_F_c_radtow_EMEP = getQc_F_c_radtow_EMEP();

        hyde_eddytowCacheModel.tau_radtow = getTau_radtow();

        hyde_eddytowCacheModel.tau_radtow_EMEP = getTau_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_tau_radtow = getQc_tau_radtow();

        hyde_eddytowCacheModel.Qc_tau_radtow_EMEP = getQc_tau_radtow_EMEP();

        hyde_eddytowCacheModel.u_star_radtow = getU_star_radtow();

        hyde_eddytowCacheModel.u_star_radtow_EMEP = getU_star_radtow_EMEP();

        hyde_eddytowCacheModel.MO_length_radtow = getMO_length_radtow();

        hyde_eddytowCacheModel.MO_length_radtow_EMEP = getMO_length_radtow_EMEP();

        hyde_eddytowCacheModel.std_u_radtow = getStd_u_radtow();

        hyde_eddytowCacheModel.std_u_radtow_EMEP = getStd_u_radtow_EMEP();

        hyde_eddytowCacheModel.std_v_radtow = getStd_v_radtow();

        hyde_eddytowCacheModel.std_v_radtow_EMEP = getStd_v_radtow_EMEP();

        hyde_eddytowCacheModel.std_w_radtow = getStd_w_radtow();

        hyde_eddytowCacheModel.std_w_radtow_EMEP = getStd_w_radtow_EMEP();

        hyde_eddytowCacheModel.std_t_radtow = getStd_t_radtow();

        hyde_eddytowCacheModel.std_t_radtow_EMEP = getStd_t_radtow_EMEP();

        hyde_eddytowCacheModel.std_c_radtow = getStd_c_radtow();

        hyde_eddytowCacheModel.std_c_radtow_EMEP = getStd_c_radtow_EMEP();

        hyde_eddytowCacheModel.std_h_radtow = getStd_h_radtow();

        hyde_eddytowCacheModel.std_h_radtow_EMEP = getStd_h_radtow_EMEP();

        hyde_eddytowCacheModel.av_u_radtow = getAv_u_radtow();

        hyde_eddytowCacheModel.av_u_radtow_EMEP = getAv_u_radtow_EMEP();

        hyde_eddytowCacheModel.av_v_radtow = getAv_v_radtow();

        hyde_eddytowCacheModel.av_v_radtow_EMEP = getAv_v_radtow_EMEP();

        hyde_eddytowCacheModel.av_w_radtow = getAv_w_radtow();

        hyde_eddytowCacheModel.av_w_radtow_EMEP = getAv_w_radtow_EMEP();

        hyde_eddytowCacheModel.av_t_radtow = getAv_t_radtow();

        hyde_eddytowCacheModel.av_t_radtow_EMEP = getAv_t_radtow_EMEP();

        hyde_eddytowCacheModel.av_c_radtow = getAv_c_radtow();

        hyde_eddytowCacheModel.av_c_radtow_EMEP = getAv_c_radtow_EMEP();

        hyde_eddytowCacheModel.av_h_radtow = getAv_h_radtow();

        hyde_eddytowCacheModel.av_h_radtow_EMEP = getAv_h_radtow_EMEP();

        hyde_eddytowCacheModel.U_radtow = getU_radtow();

        hyde_eddytowCacheModel.U_radtow_EMEP = getU_radtow_EMEP();

        hyde_eddytowCacheModel.wind_dir_radtow = getWind_dir_radtow();

        hyde_eddytowCacheModel.wind_dir_radtow_EMEP = getWind_dir_radtow_EMEP();

        hyde_eddytowCacheModel.eta_radtow = getEta_radtow();

        hyde_eddytowCacheModel.eta_radtow_EMEP = getEta_radtow_EMEP();

        hyde_eddytowCacheModel.theta_radtow = getTheta_radtow();

        hyde_eddytowCacheModel.theta_radtow_EMEP = getTheta_radtow_EMEP();

        hyde_eddytowCacheModel.beta_radtow = getBeta_radtow();

        hyde_eddytowCacheModel.beta_radtow_EMEP = getBeta_radtow_EMEP();

        hyde_eddytowCacheModel.c_lag_radtow = getC_lag_radtow();

        hyde_eddytowCacheModel.c_lag_radtow_EMEP = getC_lag_radtow_EMEP();

        hyde_eddytowCacheModel.h_lag_radtow = getH_lag_radtow();

        hyde_eddytowCacheModel.h_lag_radtow_EMEP = getH_lag_radtow_EMEP();

        hyde_eddytowCacheModel.err_packet_radtow = getErr_packet_radtow();

        hyde_eddytowCacheModel.err_packet_radtow_EMEP = getErr_packet_radtow_EMEP();

        hyde_eddytowCacheModel.licor_t_std_radtow = getLicor_t_std_radtow();

        hyde_eddytowCacheModel.licor_t_std_radtow_EMEP = getLicor_t_std_radtow_EMEP();

        hyde_eddytowCacheModel.licor_t_av_radtow = getLicor_t_av_radtow();

        hyde_eddytowCacheModel.licor_t_av_radtow_EMEP = getLicor_t_av_radtow_EMEP();

        hyde_eddytowCacheModel.licor_p_std_radtow = getLicor_p_std_radtow();

        hyde_eddytowCacheModel.licor_p_std_radtow_EMEP = getLicor_p_std_radtow_EMEP();

        hyde_eddytowCacheModel.licor_p_av_radtow = getLicor_p_av_radtow();

        hyde_eddytowCacheModel.licor_p_av_radtow_EMEP = getLicor_p_av_radtow_EMEP();

        hyde_eddytowCacheModel.F_O3_radtow = getF_O3_radtow();

        hyde_eddytowCacheModel.F_O3_radtow_EMEP = getF_O3_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_F_O3_radtow = getQc_F_O3_radtow();

        hyde_eddytowCacheModel.Qc_F_O3_radtow_EMEP = getQc_F_O3_radtow_EMEP();

        hyde_eddytowCacheModel.std_O3_radtow = getStd_O3_radtow();

        hyde_eddytowCacheModel.std_O3_radtow_EMEP = getStd_O3_radtow_EMEP();

        hyde_eddytowCacheModel.av_O3_radtow = getAv_O3_radtow();

        hyde_eddytowCacheModel.av_O3_radtow_EMEP = getAv_O3_radtow_EMEP();

        hyde_eddytowCacheModel.O3_lag_radtow = getO3_lag_radtow();

        hyde_eddytowCacheModel.O3_lag_radtow_EMEP = getO3_lag_radtow_EMEP();

        hyde_eddytowCacheModel.NEE_radtow = getNEE_radtow();

        hyde_eddytowCacheModel.NEE_radtow_EMEP = getNEE_radtow_EMEP();

        hyde_eddytowCacheModel.Qc_gapf_NEE_radtow = getQc_gapf_NEE_radtow();

        hyde_eddytowCacheModel.Qc_gapf_NEE_radtow_EMEP = getQc_gapf_NEE_radtow_EMEP();

        hyde_eddytowCacheModel.GPP_radtow = getGPP_radtow();

        hyde_eddytowCacheModel.GPP_radtow_EMEP = getGPP_radtow_EMEP();

        hyde_eddytowCacheModel.TER_radtow = getTER_radtow();

        hyde_eddytowCacheModel.TER_radtow_EMEP = getTER_radtow_EMEP();

        return hyde_eddytowCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(183);

        sb.append("{samptime=");
        sb.append(getSamptime());
        sb.append(", H_radtow=");
        sb.append(getH_radtow());
        sb.append(", H_radtow_EMEP=");
        sb.append(getH_radtow_EMEP());
        sb.append(", Qc_H_radtow=");
        sb.append(getQc_H_radtow());
        sb.append(", Qc_H_radtow_EMEP=");
        sb.append(getQc_H_radtow_EMEP());
        sb.append(", LE_radtow=");
        sb.append(getLE_radtow());
        sb.append(", LE_radtow_EMEP=");
        sb.append(getLE_radtow_EMEP());
        sb.append(", Qc_LE_radtow=");
        sb.append(getQc_LE_radtow());
        sb.append(", Qc_LE_radtow_EMEP=");
        sb.append(getQc_LE_radtow_EMEP());
        sb.append(", E_radtow=");
        sb.append(getE_radtow());
        sb.append(", E_radtow_EMEP=");
        sb.append(getE_radtow_EMEP());
        sb.append(", Qc_E_radtow=");
        sb.append(getQc_E_radtow());
        sb.append(", Qc_E_radtow_EMEP=");
        sb.append(getQc_E_radtow_EMEP());
        sb.append(", F_c_radtow=");
        sb.append(getF_c_radtow());
        sb.append(", F_c_radtow_EMEP=");
        sb.append(getF_c_radtow_EMEP());
        sb.append(", Qc_F_c_radtow=");
        sb.append(getQc_F_c_radtow());
        sb.append(", Qc_F_c_radtow_EMEP=");
        sb.append(getQc_F_c_radtow_EMEP());
        sb.append(", tau_radtow=");
        sb.append(getTau_radtow());
        sb.append(", tau_radtow_EMEP=");
        sb.append(getTau_radtow_EMEP());
        sb.append(", Qc_tau_radtow=");
        sb.append(getQc_tau_radtow());
        sb.append(", Qc_tau_radtow_EMEP=");
        sb.append(getQc_tau_radtow_EMEP());
        sb.append(", u_star_radtow=");
        sb.append(getU_star_radtow());
        sb.append(", u_star_radtow_EMEP=");
        sb.append(getU_star_radtow_EMEP());
        sb.append(", MO_length_radtow=");
        sb.append(getMO_length_radtow());
        sb.append(", MO_length_radtow_EMEP=");
        sb.append(getMO_length_radtow_EMEP());
        sb.append(", std_u_radtow=");
        sb.append(getStd_u_radtow());
        sb.append(", std_u_radtow_EMEP=");
        sb.append(getStd_u_radtow_EMEP());
        sb.append(", std_v_radtow=");
        sb.append(getStd_v_radtow());
        sb.append(", std_v_radtow_EMEP=");
        sb.append(getStd_v_radtow_EMEP());
        sb.append(", std_w_radtow=");
        sb.append(getStd_w_radtow());
        sb.append(", std_w_radtow_EMEP=");
        sb.append(getStd_w_radtow_EMEP());
        sb.append(", std_t_radtow=");
        sb.append(getStd_t_radtow());
        sb.append(", std_t_radtow_EMEP=");
        sb.append(getStd_t_radtow_EMEP());
        sb.append(", std_c_radtow=");
        sb.append(getStd_c_radtow());
        sb.append(", std_c_radtow_EMEP=");
        sb.append(getStd_c_radtow_EMEP());
        sb.append(", std_h_radtow=");
        sb.append(getStd_h_radtow());
        sb.append(", std_h_radtow_EMEP=");
        sb.append(getStd_h_radtow_EMEP());
        sb.append(", av_u_radtow=");
        sb.append(getAv_u_radtow());
        sb.append(", av_u_radtow_EMEP=");
        sb.append(getAv_u_radtow_EMEP());
        sb.append(", av_v_radtow=");
        sb.append(getAv_v_radtow());
        sb.append(", av_v_radtow_EMEP=");
        sb.append(getAv_v_radtow_EMEP());
        sb.append(", av_w_radtow=");
        sb.append(getAv_w_radtow());
        sb.append(", av_w_radtow_EMEP=");
        sb.append(getAv_w_radtow_EMEP());
        sb.append(", av_t_radtow=");
        sb.append(getAv_t_radtow());
        sb.append(", av_t_radtow_EMEP=");
        sb.append(getAv_t_radtow_EMEP());
        sb.append(", av_c_radtow=");
        sb.append(getAv_c_radtow());
        sb.append(", av_c_radtow_EMEP=");
        sb.append(getAv_c_radtow_EMEP());
        sb.append(", av_h_radtow=");
        sb.append(getAv_h_radtow());
        sb.append(", av_h_radtow_EMEP=");
        sb.append(getAv_h_radtow_EMEP());
        sb.append(", U_radtow=");
        sb.append(getU_radtow());
        sb.append(", U_radtow_EMEP=");
        sb.append(getU_radtow_EMEP());
        sb.append(", wind_dir_radtow=");
        sb.append(getWind_dir_radtow());
        sb.append(", wind_dir_radtow_EMEP=");
        sb.append(getWind_dir_radtow_EMEP());
        sb.append(", eta_radtow=");
        sb.append(getEta_radtow());
        sb.append(", eta_radtow_EMEP=");
        sb.append(getEta_radtow_EMEP());
        sb.append(", theta_radtow=");
        sb.append(getTheta_radtow());
        sb.append(", theta_radtow_EMEP=");
        sb.append(getTheta_radtow_EMEP());
        sb.append(", beta_radtow=");
        sb.append(getBeta_radtow());
        sb.append(", beta_radtow_EMEP=");
        sb.append(getBeta_radtow_EMEP());
        sb.append(", c_lag_radtow=");
        sb.append(getC_lag_radtow());
        sb.append(", c_lag_radtow_EMEP=");
        sb.append(getC_lag_radtow_EMEP());
        sb.append(", h_lag_radtow=");
        sb.append(getH_lag_radtow());
        sb.append(", h_lag_radtow_EMEP=");
        sb.append(getH_lag_radtow_EMEP());
        sb.append(", err_packet_radtow=");
        sb.append(getErr_packet_radtow());
        sb.append(", err_packet_radtow_EMEP=");
        sb.append(getErr_packet_radtow_EMEP());
        sb.append(", licor_t_std_radtow=");
        sb.append(getLicor_t_std_radtow());
        sb.append(", licor_t_std_radtow_EMEP=");
        sb.append(getLicor_t_std_radtow_EMEP());
        sb.append(", licor_t_av_radtow=");
        sb.append(getLicor_t_av_radtow());
        sb.append(", licor_t_av_radtow_EMEP=");
        sb.append(getLicor_t_av_radtow_EMEP());
        sb.append(", licor_p_std_radtow=");
        sb.append(getLicor_p_std_radtow());
        sb.append(", licor_p_std_radtow_EMEP=");
        sb.append(getLicor_p_std_radtow_EMEP());
        sb.append(", licor_p_av_radtow=");
        sb.append(getLicor_p_av_radtow());
        sb.append(", licor_p_av_radtow_EMEP=");
        sb.append(getLicor_p_av_radtow_EMEP());
        sb.append(", F_O3_radtow=");
        sb.append(getF_O3_radtow());
        sb.append(", F_O3_radtow_EMEP=");
        sb.append(getF_O3_radtow_EMEP());
        sb.append(", Qc_F_O3_radtow=");
        sb.append(getQc_F_O3_radtow());
        sb.append(", Qc_F_O3_radtow_EMEP=");
        sb.append(getQc_F_O3_radtow_EMEP());
        sb.append(", std_O3_radtow=");
        sb.append(getStd_O3_radtow());
        sb.append(", std_O3_radtow_EMEP=");
        sb.append(getStd_O3_radtow_EMEP());
        sb.append(", av_O3_radtow=");
        sb.append(getAv_O3_radtow());
        sb.append(", av_O3_radtow_EMEP=");
        sb.append(getAv_O3_radtow_EMEP());
        sb.append(", O3_lag_radtow=");
        sb.append(getO3_lag_radtow());
        sb.append(", O3_lag_radtow_EMEP=");
        sb.append(getO3_lag_radtow_EMEP());
        sb.append(", NEE_radtow=");
        sb.append(getNEE_radtow());
        sb.append(", NEE_radtow_EMEP=");
        sb.append(getNEE_radtow_EMEP());
        sb.append(", Qc_gapf_NEE_radtow=");
        sb.append(getQc_gapf_NEE_radtow());
        sb.append(", Qc_gapf_NEE_radtow_EMEP=");
        sb.append(getQc_gapf_NEE_radtow_EMEP());
        sb.append(", GPP_radtow=");
        sb.append(getGPP_radtow());
        sb.append(", GPP_radtow_EMEP=");
        sb.append(getGPP_radtow_EMEP());
        sb.append(", TER_radtow=");
        sb.append(getTER_radtow());
        sb.append(", TER_radtow_EMEP=");
        sb.append(getTER_radtow_EMEP());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(277);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.Hyde_eddytow");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>samptime</column-name><column-value><![CDATA[");
        sb.append(getSamptime());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>H_radtow</column-name><column-value><![CDATA[");
        sb.append(getH_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>H_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getH_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_H_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_H_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_H_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_H_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>LE_radtow</column-name><column-value><![CDATA[");
        sb.append(getLE_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>LE_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getLE_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_LE_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_LE_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_LE_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_LE_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>E_radtow</column-name><column-value><![CDATA[");
        sb.append(getE_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>E_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getE_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_E_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_E_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_E_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_E_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>F_c_radtow</column-name><column-value><![CDATA[");
        sb.append(getF_c_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>F_c_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getF_c_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_F_c_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_F_c_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_F_c_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_F_c_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tau_radtow</column-name><column-value><![CDATA[");
        sb.append(getTau_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tau_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getTau_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_tau_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_tau_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_tau_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_tau_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>u_star_radtow</column-name><column-value><![CDATA[");
        sb.append(getU_star_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>u_star_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getU_star_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>MO_length_radtow</column-name><column-value><![CDATA[");
        sb.append(getMO_length_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>MO_length_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getMO_length_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_u_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_u_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_u_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_u_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_v_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_v_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_v_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_v_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_w_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_w_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_w_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_w_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_t_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_t_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_t_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_t_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_c_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_c_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_c_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_c_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_h_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_h_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_h_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_h_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_u_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_u_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_u_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_u_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_v_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_v_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_v_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_v_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_w_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_w_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_w_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_w_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_t_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_t_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_t_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_t_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_c_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_c_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_c_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_c_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_h_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_h_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_h_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_h_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>U_radtow</column-name><column-value><![CDATA[");
        sb.append(getU_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>U_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getU_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>wind_dir_radtow</column-name><column-value><![CDATA[");
        sb.append(getWind_dir_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>wind_dir_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getWind_dir_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eta_radtow</column-name><column-value><![CDATA[");
        sb.append(getEta_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eta_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getEta_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>theta_radtow</column-name><column-value><![CDATA[");
        sb.append(getTheta_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>theta_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getTheta_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>beta_radtow</column-name><column-value><![CDATA[");
        sb.append(getBeta_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>beta_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getBeta_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>c_lag_radtow</column-name><column-value><![CDATA[");
        sb.append(getC_lag_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>c_lag_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getC_lag_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>h_lag_radtow</column-name><column-value><![CDATA[");
        sb.append(getH_lag_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>h_lag_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getH_lag_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>err_packet_radtow</column-name><column-value><![CDATA[");
        sb.append(getErr_packet_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>err_packet_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getErr_packet_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_t_std_radtow</column-name><column-value><![CDATA[");
        sb.append(getLicor_t_std_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_t_std_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getLicor_t_std_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_t_av_radtow</column-name><column-value><![CDATA[");
        sb.append(getLicor_t_av_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_t_av_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getLicor_t_av_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_p_std_radtow</column-name><column-value><![CDATA[");
        sb.append(getLicor_p_std_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_p_std_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getLicor_p_std_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_p_av_radtow</column-name><column-value><![CDATA[");
        sb.append(getLicor_p_av_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>licor_p_av_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getLicor_p_av_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>F_O3_radtow</column-name><column-value><![CDATA[");
        sb.append(getF_O3_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>F_O3_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getF_O3_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_F_O3_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_F_O3_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_F_O3_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_F_O3_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_O3_radtow</column-name><column-value><![CDATA[");
        sb.append(getStd_O3_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>std_O3_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getStd_O3_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_O3_radtow</column-name><column-value><![CDATA[");
        sb.append(getAv_O3_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>av_O3_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getAv_O3_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>O3_lag_radtow</column-name><column-value><![CDATA[");
        sb.append(getO3_lag_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>O3_lag_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getO3_lag_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>NEE_radtow</column-name><column-value><![CDATA[");
        sb.append(getNEE_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>NEE_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getNEE_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_gapf_NEE_radtow</column-name><column-value><![CDATA[");
        sb.append(getQc_gapf_NEE_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>Qc_gapf_NEE_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getQc_gapf_NEE_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>GPP_radtow</column-name><column-value><![CDATA[");
        sb.append(getGPP_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>GPP_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getGPP_radtow_EMEP());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>TER_radtow</column-name><column-value><![CDATA[");
        sb.append(getTER_radtow());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>TER_radtow_EMEP</column-name><column-value><![CDATA[");
        sb.append(getTER_radtow_EMEP());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
