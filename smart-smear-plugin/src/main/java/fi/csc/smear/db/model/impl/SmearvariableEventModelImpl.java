package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.smear.db.model.SmearvariableEvent;
import fi.csc.smear.db.model.SmearvariableEventModel;
import fi.csc.smear.db.service.persistence.SmearvariableEventPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SmearvariableEvent service. Represents a row in the &quot;variableEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.smear.db.model.SmearvariableEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SmearvariableEventImpl}.
 * </p>
 *
 * @author pj
 * @see SmearvariableEventImpl
 * @see fi.csc.smear.db.model.SmearvariableEvent
 * @see fi.csc.smear.db.model.SmearvariableEventModel
 * @generated
 */
public class SmearvariableEventModelImpl extends BaseModelImpl<SmearvariableEvent>
    implements SmearvariableEventModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a smearvariable event model instance should use the {@link fi.csc.smear.db.model.SmearvariableEvent} interface instead.
     */
    public static final String TABLE_NAME = "variableEvent";
    public static final Object[][] TABLE_COLUMNS = {
            { "eventID", Types.BIGINT },
            { "variableID", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table variableEvent (eventID LONG not null,variableID LONG not null,primary key (eventID, variableID))";
    public static final String TABLE_SQL_DROP = "drop table variableEvent";
    public static final String ORDER_BY_JPQL = " ORDER BY smearvariableEvent.id.eventID ASC, smearvariableEvent.id.variableID ASC";
    public static final String ORDER_BY_SQL = " ORDER BY variableEvent.eventID ASC, variableEvent.variableID ASC";
    public static final String DATA_SOURCE = "smear";
    public static final String SESSION_FACTORY = "smearSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.smear.db.model.SmearvariableEvent"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.smear.db.model.SmearvariableEvent"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.fi.csc.smear.db.model.SmearvariableEvent"),
            true);
    public static long VARIABLEID_COLUMN_BITMASK = 1L;
    public static long EVENTID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.smear.db.model.SmearvariableEvent"));
    private static ClassLoader _classLoader = SmearvariableEvent.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            SmearvariableEvent.class
        };
    private long _eventID;
    private long _variableID;
    private long _originalVariableID;
    private boolean _setOriginalVariableID;
    private long _columnBitmask;
    private SmearvariableEvent _escapedModel;

    public SmearvariableEventModelImpl() {
    }

    @Override
    public SmearvariableEventPK getPrimaryKey() {
        return new SmearvariableEventPK(_eventID, _variableID);
    }

    @Override
    public void setPrimaryKey(SmearvariableEventPK primaryKey) {
        setEventID(primaryKey.eventID);
        setVariableID(primaryKey.variableID);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new SmearvariableEventPK(_eventID, _variableID);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((SmearvariableEventPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return SmearvariableEvent.class;
    }

    @Override
    public String getModelClassName() {
        return SmearvariableEvent.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("eventID", getEventID());
        attributes.put("variableID", getVariableID());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long eventID = (Long) attributes.get("eventID");

        if (eventID != null) {
            setEventID(eventID);
        }

        Long variableID = (Long) attributes.get("variableID");

        if (variableID != null) {
            setVariableID(variableID);
        }
    }

    @Override
    public long getEventID() {
        return _eventID;
    }

    @Override
    public void setEventID(long eventID) {
        _eventID = eventID;
    }

    @Override
    public long getVariableID() {
        return _variableID;
    }

    @Override
    public void setVariableID(long variableID) {
        _columnBitmask |= VARIABLEID_COLUMN_BITMASK;

        if (!_setOriginalVariableID) {
            _setOriginalVariableID = true;

            _originalVariableID = _variableID;
        }

        _variableID = variableID;
    }

    public long getOriginalVariableID() {
        return _originalVariableID;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public SmearvariableEvent toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (SmearvariableEvent) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SmearvariableEventImpl smearvariableEventImpl = new SmearvariableEventImpl();

        smearvariableEventImpl.setEventID(getEventID());
        smearvariableEventImpl.setVariableID(getVariableID());

        smearvariableEventImpl.resetOriginalValues();

        return smearvariableEventImpl;
    }

    @Override
    public int compareTo(SmearvariableEvent smearvariableEvent) {
        SmearvariableEventPK primaryKey = smearvariableEvent.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof SmearvariableEvent)) {
            return false;
        }

        SmearvariableEvent smearvariableEvent = (SmearvariableEvent) obj;

        SmearvariableEventPK primaryKey = smearvariableEvent.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        SmearvariableEventModelImpl smearvariableEventModelImpl = this;

        smearvariableEventModelImpl._originalVariableID = smearvariableEventModelImpl._variableID;

        smearvariableEventModelImpl._setOriginalVariableID = false;

        smearvariableEventModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<SmearvariableEvent> toCacheModel() {
        SmearvariableEventCacheModel smearvariableEventCacheModel = new SmearvariableEventCacheModel();

        smearvariableEventCacheModel.eventID = getEventID();

        smearvariableEventCacheModel.variableID = getVariableID();

        return smearvariableEventCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{eventID=");
        sb.append(getEventID());
        sb.append(", variableID=");
        sb.append(getVariableID());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("fi.csc.smear.db.model.SmearvariableEvent");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>eventID</column-name><column-value><![CDATA[");
        sb.append(getEventID());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>variableID</column-name><column-value><![CDATA[");
        sb.append(getVariableID());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
