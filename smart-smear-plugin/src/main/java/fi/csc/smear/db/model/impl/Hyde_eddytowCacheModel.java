package fi.csc.smear.db.model.impl;

import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;

import fi.csc.smear.db.model.Hyde_eddytow;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import java.util.Date;

/**
 * The cache model class for representing Hyde_eddytow in entity cache.
 *
 * @author pj
 * @see Hyde_eddytow
 * @generated
 */
public class Hyde_eddytowCacheModel implements CacheModel<Hyde_eddytow>,
    Externalizable {
    public long samptime;
    public float H_radtow;
    public int H_radtow_EMEP;
    public int Qc_H_radtow;
    public int Qc_H_radtow_EMEP;
    public float LE_radtow;
    public int LE_radtow_EMEP;
    public int Qc_LE_radtow;
    public int Qc_LE_radtow_EMEP;
    public float E_radtow;
    public int E_radtow_EMEP;
    public int Qc_E_radtow;
    public int Qc_E_radtow_EMEP;
    public float F_c_radtow;
    public int F_c_radtow_EMEP;
    public int Qc_F_c_radtow;
    public int Qc_F_c_radtow_EMEP;
    public float tau_radtow;
    public int tau_radtow_EMEP;
    public int Qc_tau_radtow;
    public int Qc_tau_radtow_EMEP;
    public float u_star_radtow;
    public int u_star_radtow_EMEP;
    public float MO_length_radtow;
    public int MO_length_radtow_EMEP;
    public float std_u_radtow;
    public int std_u_radtow_EMEP;
    public float std_v_radtow;
    public int std_v_radtow_EMEP;
    public float std_w_radtow;
    public int std_w_radtow_EMEP;
    public float std_t_radtow;
    public int std_t_radtow_EMEP;
    public float std_c_radtow;
    public int std_c_radtow_EMEP;
    public float std_h_radtow;
    public int std_h_radtow_EMEP;
    public float av_u_radtow;
    public int av_u_radtow_EMEP;
    public float av_v_radtow;
    public int av_v_radtow_EMEP;
    public float av_w_radtow;
    public int av_w_radtow_EMEP;
    public float av_t_radtow;
    public int av_t_radtow_EMEP;
    public float av_c_radtow;
    public int av_c_radtow_EMEP;
    public float av_h_radtow;
    public int av_h_radtow_EMEP;
    public float U_radtow;
    public int U_radtow_EMEP;
    public float wind_dir_radtow;
    public int wind_dir_radtow_EMEP;
    public float eta_radtow;
    public int eta_radtow_EMEP;
    public float theta_radtow;
    public int theta_radtow_EMEP;
    public float beta_radtow;
    public int beta_radtow_EMEP;
    public float c_lag_radtow;
    public int c_lag_radtow_EMEP;
    public float h_lag_radtow;
    public int h_lag_radtow_EMEP;
    public float err_packet_radtow;
    public int err_packet_radtow_EMEP;
    public float licor_t_std_radtow;
    public int licor_t_std_radtow_EMEP;
    public float licor_t_av_radtow;
    public int licor_t_av_radtow_EMEP;
    public float licor_p_std_radtow;
    public int licor_p_std_radtow_EMEP;
    public float licor_p_av_radtow;
    public int licor_p_av_radtow_EMEP;
    public float F_O3_radtow;
    public int F_O3_radtow_EMEP;
    public int Qc_F_O3_radtow;
    public int Qc_F_O3_radtow_EMEP;
    public float std_O3_radtow;
    public int std_O3_radtow_EMEP;
    public float av_O3_radtow;
    public int av_O3_radtow_EMEP;
    public float O3_lag_radtow;
    public int O3_lag_radtow_EMEP;
    public float NEE_radtow;
    public int NEE_radtow_EMEP;
    public int Qc_gapf_NEE_radtow;
    public int Qc_gapf_NEE_radtow_EMEP;
    public float GPP_radtow;
    public int GPP_radtow_EMEP;
    public float TER_radtow;
    public int TER_radtow_EMEP;

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(183);

        sb.append("{samptime=");
        sb.append(samptime);
        sb.append(", H_radtow=");
        sb.append(H_radtow);
        sb.append(", H_radtow_EMEP=");
        sb.append(H_radtow_EMEP);
        sb.append(", Qc_H_radtow=");
        sb.append(Qc_H_radtow);
        sb.append(", Qc_H_radtow_EMEP=");
        sb.append(Qc_H_radtow_EMEP);
        sb.append(", LE_radtow=");
        sb.append(LE_radtow);
        sb.append(", LE_radtow_EMEP=");
        sb.append(LE_radtow_EMEP);
        sb.append(", Qc_LE_radtow=");
        sb.append(Qc_LE_radtow);
        sb.append(", Qc_LE_radtow_EMEP=");
        sb.append(Qc_LE_radtow_EMEP);
        sb.append(", E_radtow=");
        sb.append(E_radtow);
        sb.append(", E_radtow_EMEP=");
        sb.append(E_radtow_EMEP);
        sb.append(", Qc_E_radtow=");
        sb.append(Qc_E_radtow);
        sb.append(", Qc_E_radtow_EMEP=");
        sb.append(Qc_E_radtow_EMEP);
        sb.append(", F_c_radtow=");
        sb.append(F_c_radtow);
        sb.append(", F_c_radtow_EMEP=");
        sb.append(F_c_radtow_EMEP);
        sb.append(", Qc_F_c_radtow=");
        sb.append(Qc_F_c_radtow);
        sb.append(", Qc_F_c_radtow_EMEP=");
        sb.append(Qc_F_c_radtow_EMEP);
        sb.append(", tau_radtow=");
        sb.append(tau_radtow);
        sb.append(", tau_radtow_EMEP=");
        sb.append(tau_radtow_EMEP);
        sb.append(", Qc_tau_radtow=");
        sb.append(Qc_tau_radtow);
        sb.append(", Qc_tau_radtow_EMEP=");
        sb.append(Qc_tau_radtow_EMEP);
        sb.append(", u_star_radtow=");
        sb.append(u_star_radtow);
        sb.append(", u_star_radtow_EMEP=");
        sb.append(u_star_radtow_EMEP);
        sb.append(", MO_length_radtow=");
        sb.append(MO_length_radtow);
        sb.append(", MO_length_radtow_EMEP=");
        sb.append(MO_length_radtow_EMEP);
        sb.append(", std_u_radtow=");
        sb.append(std_u_radtow);
        sb.append(", std_u_radtow_EMEP=");
        sb.append(std_u_radtow_EMEP);
        sb.append(", std_v_radtow=");
        sb.append(std_v_radtow);
        sb.append(", std_v_radtow_EMEP=");
        sb.append(std_v_radtow_EMEP);
        sb.append(", std_w_radtow=");
        sb.append(std_w_radtow);
        sb.append(", std_w_radtow_EMEP=");
        sb.append(std_w_radtow_EMEP);
        sb.append(", std_t_radtow=");
        sb.append(std_t_radtow);
        sb.append(", std_t_radtow_EMEP=");
        sb.append(std_t_radtow_EMEP);
        sb.append(", std_c_radtow=");
        sb.append(std_c_radtow);
        sb.append(", std_c_radtow_EMEP=");
        sb.append(std_c_radtow_EMEP);
        sb.append(", std_h_radtow=");
        sb.append(std_h_radtow);
        sb.append(", std_h_radtow_EMEP=");
        sb.append(std_h_radtow_EMEP);
        sb.append(", av_u_radtow=");
        sb.append(av_u_radtow);
        sb.append(", av_u_radtow_EMEP=");
        sb.append(av_u_radtow_EMEP);
        sb.append(", av_v_radtow=");
        sb.append(av_v_radtow);
        sb.append(", av_v_radtow_EMEP=");
        sb.append(av_v_radtow_EMEP);
        sb.append(", av_w_radtow=");
        sb.append(av_w_radtow);
        sb.append(", av_w_radtow_EMEP=");
        sb.append(av_w_radtow_EMEP);
        sb.append(", av_t_radtow=");
        sb.append(av_t_radtow);
        sb.append(", av_t_radtow_EMEP=");
        sb.append(av_t_radtow_EMEP);
        sb.append(", av_c_radtow=");
        sb.append(av_c_radtow);
        sb.append(", av_c_radtow_EMEP=");
        sb.append(av_c_radtow_EMEP);
        sb.append(", av_h_radtow=");
        sb.append(av_h_radtow);
        sb.append(", av_h_radtow_EMEP=");
        sb.append(av_h_radtow_EMEP);
        sb.append(", U_radtow=");
        sb.append(U_radtow);
        sb.append(", U_radtow_EMEP=");
        sb.append(U_radtow_EMEP);
        sb.append(", wind_dir_radtow=");
        sb.append(wind_dir_radtow);
        sb.append(", wind_dir_radtow_EMEP=");
        sb.append(wind_dir_radtow_EMEP);
        sb.append(", eta_radtow=");
        sb.append(eta_radtow);
        sb.append(", eta_radtow_EMEP=");
        sb.append(eta_radtow_EMEP);
        sb.append(", theta_radtow=");
        sb.append(theta_radtow);
        sb.append(", theta_radtow_EMEP=");
        sb.append(theta_radtow_EMEP);
        sb.append(", beta_radtow=");
        sb.append(beta_radtow);
        sb.append(", beta_radtow_EMEP=");
        sb.append(beta_radtow_EMEP);
        sb.append(", c_lag_radtow=");
        sb.append(c_lag_radtow);
        sb.append(", c_lag_radtow_EMEP=");
        sb.append(c_lag_radtow_EMEP);
        sb.append(", h_lag_radtow=");
        sb.append(h_lag_radtow);
        sb.append(", h_lag_radtow_EMEP=");
        sb.append(h_lag_radtow_EMEP);
        sb.append(", err_packet_radtow=");
        sb.append(err_packet_radtow);
        sb.append(", err_packet_radtow_EMEP=");
        sb.append(err_packet_radtow_EMEP);
        sb.append(", licor_t_std_radtow=");
        sb.append(licor_t_std_radtow);
        sb.append(", licor_t_std_radtow_EMEP=");
        sb.append(licor_t_std_radtow_EMEP);
        sb.append(", licor_t_av_radtow=");
        sb.append(licor_t_av_radtow);
        sb.append(", licor_t_av_radtow_EMEP=");
        sb.append(licor_t_av_radtow_EMEP);
        sb.append(", licor_p_std_radtow=");
        sb.append(licor_p_std_radtow);
        sb.append(", licor_p_std_radtow_EMEP=");
        sb.append(licor_p_std_radtow_EMEP);
        sb.append(", licor_p_av_radtow=");
        sb.append(licor_p_av_radtow);
        sb.append(", licor_p_av_radtow_EMEP=");
        sb.append(licor_p_av_radtow_EMEP);
        sb.append(", F_O3_radtow=");
        sb.append(F_O3_radtow);
        sb.append(", F_O3_radtow_EMEP=");
        sb.append(F_O3_radtow_EMEP);
        sb.append(", Qc_F_O3_radtow=");
        sb.append(Qc_F_O3_radtow);
        sb.append(", Qc_F_O3_radtow_EMEP=");
        sb.append(Qc_F_O3_radtow_EMEP);
        sb.append(", std_O3_radtow=");
        sb.append(std_O3_radtow);
        sb.append(", std_O3_radtow_EMEP=");
        sb.append(std_O3_radtow_EMEP);
        sb.append(", av_O3_radtow=");
        sb.append(av_O3_radtow);
        sb.append(", av_O3_radtow_EMEP=");
        sb.append(av_O3_radtow_EMEP);
        sb.append(", O3_lag_radtow=");
        sb.append(O3_lag_radtow);
        sb.append(", O3_lag_radtow_EMEP=");
        sb.append(O3_lag_radtow_EMEP);
        sb.append(", NEE_radtow=");
        sb.append(NEE_radtow);
        sb.append(", NEE_radtow_EMEP=");
        sb.append(NEE_radtow_EMEP);
        sb.append(", Qc_gapf_NEE_radtow=");
        sb.append(Qc_gapf_NEE_radtow);
        sb.append(", Qc_gapf_NEE_radtow_EMEP=");
        sb.append(Qc_gapf_NEE_radtow_EMEP);
        sb.append(", GPP_radtow=");
        sb.append(GPP_radtow);
        sb.append(", GPP_radtow_EMEP=");
        sb.append(GPP_radtow_EMEP);
        sb.append(", TER_radtow=");
        sb.append(TER_radtow);
        sb.append(", TER_radtow_EMEP=");
        sb.append(TER_radtow_EMEP);
        sb.append("}");

        return sb.toString();
    }

    @Override
    public Hyde_eddytow toEntityModel() {
        Hyde_eddytowImpl hyde_eddytowImpl = new Hyde_eddytowImpl();

        if (samptime == Long.MIN_VALUE) {
            hyde_eddytowImpl.setSamptime(null);
        } else {
            hyde_eddytowImpl.setSamptime(new Date(samptime));
        }

        hyde_eddytowImpl.setH_radtow(H_radtow);
        hyde_eddytowImpl.setH_radtow_EMEP(H_radtow_EMEP);
        hyde_eddytowImpl.setQc_H_radtow(Qc_H_radtow);
        hyde_eddytowImpl.setQc_H_radtow_EMEP(Qc_H_radtow_EMEP);
        hyde_eddytowImpl.setLE_radtow(LE_radtow);
        hyde_eddytowImpl.setLE_radtow_EMEP(LE_radtow_EMEP);
        hyde_eddytowImpl.setQc_LE_radtow(Qc_LE_radtow);
        hyde_eddytowImpl.setQc_LE_radtow_EMEP(Qc_LE_radtow_EMEP);
        hyde_eddytowImpl.setE_radtow(E_radtow);
        hyde_eddytowImpl.setE_radtow_EMEP(E_radtow_EMEP);
        hyde_eddytowImpl.setQc_E_radtow(Qc_E_radtow);
        hyde_eddytowImpl.setQc_E_radtow_EMEP(Qc_E_radtow_EMEP);
        hyde_eddytowImpl.setF_c_radtow(F_c_radtow);
        hyde_eddytowImpl.setF_c_radtow_EMEP(F_c_radtow_EMEP);
        hyde_eddytowImpl.setQc_F_c_radtow(Qc_F_c_radtow);
        hyde_eddytowImpl.setQc_F_c_radtow_EMEP(Qc_F_c_radtow_EMEP);
        hyde_eddytowImpl.setTau_radtow(tau_radtow);
        hyde_eddytowImpl.setTau_radtow_EMEP(tau_radtow_EMEP);
        hyde_eddytowImpl.setQc_tau_radtow(Qc_tau_radtow);
        hyde_eddytowImpl.setQc_tau_radtow_EMEP(Qc_tau_radtow_EMEP);
        hyde_eddytowImpl.setU_star_radtow(u_star_radtow);
        hyde_eddytowImpl.setU_star_radtow_EMEP(u_star_radtow_EMEP);
        hyde_eddytowImpl.setMO_length_radtow(MO_length_radtow);
        hyde_eddytowImpl.setMO_length_radtow_EMEP(MO_length_radtow_EMEP);
        hyde_eddytowImpl.setStd_u_radtow(std_u_radtow);
        hyde_eddytowImpl.setStd_u_radtow_EMEP(std_u_radtow_EMEP);
        hyde_eddytowImpl.setStd_v_radtow(std_v_radtow);
        hyde_eddytowImpl.setStd_v_radtow_EMEP(std_v_radtow_EMEP);
        hyde_eddytowImpl.setStd_w_radtow(std_w_radtow);
        hyde_eddytowImpl.setStd_w_radtow_EMEP(std_w_radtow_EMEP);
        hyde_eddytowImpl.setStd_t_radtow(std_t_radtow);
        hyde_eddytowImpl.setStd_t_radtow_EMEP(std_t_radtow_EMEP);
        hyde_eddytowImpl.setStd_c_radtow(std_c_radtow);
        hyde_eddytowImpl.setStd_c_radtow_EMEP(std_c_radtow_EMEP);
        hyde_eddytowImpl.setStd_h_radtow(std_h_radtow);
        hyde_eddytowImpl.setStd_h_radtow_EMEP(std_h_radtow_EMEP);
        hyde_eddytowImpl.setAv_u_radtow(av_u_radtow);
        hyde_eddytowImpl.setAv_u_radtow_EMEP(av_u_radtow_EMEP);
        hyde_eddytowImpl.setAv_v_radtow(av_v_radtow);
        hyde_eddytowImpl.setAv_v_radtow_EMEP(av_v_radtow_EMEP);
        hyde_eddytowImpl.setAv_w_radtow(av_w_radtow);
        hyde_eddytowImpl.setAv_w_radtow_EMEP(av_w_radtow_EMEP);
        hyde_eddytowImpl.setAv_t_radtow(av_t_radtow);
        hyde_eddytowImpl.setAv_t_radtow_EMEP(av_t_radtow_EMEP);
        hyde_eddytowImpl.setAv_c_radtow(av_c_radtow);
        hyde_eddytowImpl.setAv_c_radtow_EMEP(av_c_radtow_EMEP);
        hyde_eddytowImpl.setAv_h_radtow(av_h_radtow);
        hyde_eddytowImpl.setAv_h_radtow_EMEP(av_h_radtow_EMEP);
        hyde_eddytowImpl.setU_radtow(U_radtow);
        hyde_eddytowImpl.setU_radtow_EMEP(U_radtow_EMEP);
        hyde_eddytowImpl.setWind_dir_radtow(wind_dir_radtow);
        hyde_eddytowImpl.setWind_dir_radtow_EMEP(wind_dir_radtow_EMEP);
        hyde_eddytowImpl.setEta_radtow(eta_radtow);
        hyde_eddytowImpl.setEta_radtow_EMEP(eta_radtow_EMEP);
        hyde_eddytowImpl.setTheta_radtow(theta_radtow);
        hyde_eddytowImpl.setTheta_radtow_EMEP(theta_radtow_EMEP);
        hyde_eddytowImpl.setBeta_radtow(beta_radtow);
        hyde_eddytowImpl.setBeta_radtow_EMEP(beta_radtow_EMEP);
        hyde_eddytowImpl.setC_lag_radtow(c_lag_radtow);
        hyde_eddytowImpl.setC_lag_radtow_EMEP(c_lag_radtow_EMEP);
        hyde_eddytowImpl.setH_lag_radtow(h_lag_radtow);
        hyde_eddytowImpl.setH_lag_radtow_EMEP(h_lag_radtow_EMEP);
        hyde_eddytowImpl.setErr_packet_radtow(err_packet_radtow);
        hyde_eddytowImpl.setErr_packet_radtow_EMEP(err_packet_radtow_EMEP);
        hyde_eddytowImpl.setLicor_t_std_radtow(licor_t_std_radtow);
        hyde_eddytowImpl.setLicor_t_std_radtow_EMEP(licor_t_std_radtow_EMEP);
        hyde_eddytowImpl.setLicor_t_av_radtow(licor_t_av_radtow);
        hyde_eddytowImpl.setLicor_t_av_radtow_EMEP(licor_t_av_radtow_EMEP);
        hyde_eddytowImpl.setLicor_p_std_radtow(licor_p_std_radtow);
        hyde_eddytowImpl.setLicor_p_std_radtow_EMEP(licor_p_std_radtow_EMEP);
        hyde_eddytowImpl.setLicor_p_av_radtow(licor_p_av_radtow);
        hyde_eddytowImpl.setLicor_p_av_radtow_EMEP(licor_p_av_radtow_EMEP);
        hyde_eddytowImpl.setF_O3_radtow(F_O3_radtow);
        hyde_eddytowImpl.setF_O3_radtow_EMEP(F_O3_radtow_EMEP);
        hyde_eddytowImpl.setQc_F_O3_radtow(Qc_F_O3_radtow);
        hyde_eddytowImpl.setQc_F_O3_radtow_EMEP(Qc_F_O3_radtow_EMEP);
        hyde_eddytowImpl.setStd_O3_radtow(std_O3_radtow);
        hyde_eddytowImpl.setStd_O3_radtow_EMEP(std_O3_radtow_EMEP);
        hyde_eddytowImpl.setAv_O3_radtow(av_O3_radtow);
        hyde_eddytowImpl.setAv_O3_radtow_EMEP(av_O3_radtow_EMEP);
        hyde_eddytowImpl.setO3_lag_radtow(O3_lag_radtow);
        hyde_eddytowImpl.setO3_lag_radtow_EMEP(O3_lag_radtow_EMEP);
        hyde_eddytowImpl.setNEE_radtow(NEE_radtow);
        hyde_eddytowImpl.setNEE_radtow_EMEP(NEE_radtow_EMEP);
        hyde_eddytowImpl.setQc_gapf_NEE_radtow(Qc_gapf_NEE_radtow);
        hyde_eddytowImpl.setQc_gapf_NEE_radtow_EMEP(Qc_gapf_NEE_radtow_EMEP);
        hyde_eddytowImpl.setGPP_radtow(GPP_radtow);
        hyde_eddytowImpl.setGPP_radtow_EMEP(GPP_radtow_EMEP);
        hyde_eddytowImpl.setTER_radtow(TER_radtow);
        hyde_eddytowImpl.setTER_radtow_EMEP(TER_radtow_EMEP);

        hyde_eddytowImpl.resetOriginalValues();

        return hyde_eddytowImpl;
    }

    @Override
    public void readExternal(ObjectInput objectInput) throws IOException {
        samptime = objectInput.readLong();
        H_radtow = objectInput.readFloat();
        H_radtow_EMEP = objectInput.readInt();
        Qc_H_radtow = objectInput.readInt();
        Qc_H_radtow_EMEP = objectInput.readInt();
        LE_radtow = objectInput.readFloat();
        LE_radtow_EMEP = objectInput.readInt();
        Qc_LE_radtow = objectInput.readInt();
        Qc_LE_radtow_EMEP = objectInput.readInt();
        E_radtow = objectInput.readFloat();
        E_radtow_EMEP = objectInput.readInt();
        Qc_E_radtow = objectInput.readInt();
        Qc_E_radtow_EMEP = objectInput.readInt();
        F_c_radtow = objectInput.readFloat();
        F_c_radtow_EMEP = objectInput.readInt();
        Qc_F_c_radtow = objectInput.readInt();
        Qc_F_c_radtow_EMEP = objectInput.readInt();
        tau_radtow = objectInput.readFloat();
        tau_radtow_EMEP = objectInput.readInt();
        Qc_tau_radtow = objectInput.readInt();
        Qc_tau_radtow_EMEP = objectInput.readInt();
        u_star_radtow = objectInput.readFloat();
        u_star_radtow_EMEP = objectInput.readInt();
        MO_length_radtow = objectInput.readFloat();
        MO_length_radtow_EMEP = objectInput.readInt();
        std_u_radtow = objectInput.readFloat();
        std_u_radtow_EMEP = objectInput.readInt();
        std_v_radtow = objectInput.readFloat();
        std_v_radtow_EMEP = objectInput.readInt();
        std_w_radtow = objectInput.readFloat();
        std_w_radtow_EMEP = objectInput.readInt();
        std_t_radtow = objectInput.readFloat();
        std_t_radtow_EMEP = objectInput.readInt();
        std_c_radtow = objectInput.readFloat();
        std_c_radtow_EMEP = objectInput.readInt();
        std_h_radtow = objectInput.readFloat();
        std_h_radtow_EMEP = objectInput.readInt();
        av_u_radtow = objectInput.readFloat();
        av_u_radtow_EMEP = objectInput.readInt();
        av_v_radtow = objectInput.readFloat();
        av_v_radtow_EMEP = objectInput.readInt();
        av_w_radtow = objectInput.readFloat();
        av_w_radtow_EMEP = objectInput.readInt();
        av_t_radtow = objectInput.readFloat();
        av_t_radtow_EMEP = objectInput.readInt();
        av_c_radtow = objectInput.readFloat();
        av_c_radtow_EMEP = objectInput.readInt();
        av_h_radtow = objectInput.readFloat();
        av_h_radtow_EMEP = objectInput.readInt();
        U_radtow = objectInput.readFloat();
        U_radtow_EMEP = objectInput.readInt();
        wind_dir_radtow = objectInput.readFloat();
        wind_dir_radtow_EMEP = objectInput.readInt();
        eta_radtow = objectInput.readFloat();
        eta_radtow_EMEP = objectInput.readInt();
        theta_radtow = objectInput.readFloat();
        theta_radtow_EMEP = objectInput.readInt();
        beta_radtow = objectInput.readFloat();
        beta_radtow_EMEP = objectInput.readInt();
        c_lag_radtow = objectInput.readFloat();
        c_lag_radtow_EMEP = objectInput.readInt();
        h_lag_radtow = objectInput.readFloat();
        h_lag_radtow_EMEP = objectInput.readInt();
        err_packet_radtow = objectInput.readFloat();
        err_packet_radtow_EMEP = objectInput.readInt();
        licor_t_std_radtow = objectInput.readFloat();
        licor_t_std_radtow_EMEP = objectInput.readInt();
        licor_t_av_radtow = objectInput.readFloat();
        licor_t_av_radtow_EMEP = objectInput.readInt();
        licor_p_std_radtow = objectInput.readFloat();
        licor_p_std_radtow_EMEP = objectInput.readInt();
        licor_p_av_radtow = objectInput.readFloat();
        licor_p_av_radtow_EMEP = objectInput.readInt();
        F_O3_radtow = objectInput.readFloat();
        F_O3_radtow_EMEP = objectInput.readInt();
        Qc_F_O3_radtow = objectInput.readInt();
        Qc_F_O3_radtow_EMEP = objectInput.readInt();
        std_O3_radtow = objectInput.readFloat();
        std_O3_radtow_EMEP = objectInput.readInt();
        av_O3_radtow = objectInput.readFloat();
        av_O3_radtow_EMEP = objectInput.readInt();
        O3_lag_radtow = objectInput.readFloat();
        O3_lag_radtow_EMEP = objectInput.readInt();
        NEE_radtow = objectInput.readFloat();
        NEE_radtow_EMEP = objectInput.readInt();
        Qc_gapf_NEE_radtow = objectInput.readInt();
        Qc_gapf_NEE_radtow_EMEP = objectInput.readInt();
        GPP_radtow = objectInput.readFloat();
        GPP_radtow_EMEP = objectInput.readInt();
        TER_radtow = objectInput.readFloat();
        TER_radtow_EMEP = objectInput.readInt();
    }

    @Override
    public void writeExternal(ObjectOutput objectOutput)
        throws IOException {
        objectOutput.writeLong(samptime);
        objectOutput.writeFloat(H_radtow);
        objectOutput.writeInt(H_radtow_EMEP);
        objectOutput.writeInt(Qc_H_radtow);
        objectOutput.writeInt(Qc_H_radtow_EMEP);
        objectOutput.writeFloat(LE_radtow);
        objectOutput.writeInt(LE_radtow_EMEP);
        objectOutput.writeInt(Qc_LE_radtow);
        objectOutput.writeInt(Qc_LE_radtow_EMEP);
        objectOutput.writeFloat(E_radtow);
        objectOutput.writeInt(E_radtow_EMEP);
        objectOutput.writeInt(Qc_E_radtow);
        objectOutput.writeInt(Qc_E_radtow_EMEP);
        objectOutput.writeFloat(F_c_radtow);
        objectOutput.writeInt(F_c_radtow_EMEP);
        objectOutput.writeInt(Qc_F_c_radtow);
        objectOutput.writeInt(Qc_F_c_radtow_EMEP);
        objectOutput.writeFloat(tau_radtow);
        objectOutput.writeInt(tau_radtow_EMEP);
        objectOutput.writeInt(Qc_tau_radtow);
        objectOutput.writeInt(Qc_tau_radtow_EMEP);
        objectOutput.writeFloat(u_star_radtow);
        objectOutput.writeInt(u_star_radtow_EMEP);
        objectOutput.writeFloat(MO_length_radtow);
        objectOutput.writeInt(MO_length_radtow_EMEP);
        objectOutput.writeFloat(std_u_radtow);
        objectOutput.writeInt(std_u_radtow_EMEP);
        objectOutput.writeFloat(std_v_radtow);
        objectOutput.writeInt(std_v_radtow_EMEP);
        objectOutput.writeFloat(std_w_radtow);
        objectOutput.writeInt(std_w_radtow_EMEP);
        objectOutput.writeFloat(std_t_radtow);
        objectOutput.writeInt(std_t_radtow_EMEP);
        objectOutput.writeFloat(std_c_radtow);
        objectOutput.writeInt(std_c_radtow_EMEP);
        objectOutput.writeFloat(std_h_radtow);
        objectOutput.writeInt(std_h_radtow_EMEP);
        objectOutput.writeFloat(av_u_radtow);
        objectOutput.writeInt(av_u_radtow_EMEP);
        objectOutput.writeFloat(av_v_radtow);
        objectOutput.writeInt(av_v_radtow_EMEP);
        objectOutput.writeFloat(av_w_radtow);
        objectOutput.writeInt(av_w_radtow_EMEP);
        objectOutput.writeFloat(av_t_radtow);
        objectOutput.writeInt(av_t_radtow_EMEP);
        objectOutput.writeFloat(av_c_radtow);
        objectOutput.writeInt(av_c_radtow_EMEP);
        objectOutput.writeFloat(av_h_radtow);
        objectOutput.writeInt(av_h_radtow_EMEP);
        objectOutput.writeFloat(U_radtow);
        objectOutput.writeInt(U_radtow_EMEP);
        objectOutput.writeFloat(wind_dir_radtow);
        objectOutput.writeInt(wind_dir_radtow_EMEP);
        objectOutput.writeFloat(eta_radtow);
        objectOutput.writeInt(eta_radtow_EMEP);
        objectOutput.writeFloat(theta_radtow);
        objectOutput.writeInt(theta_radtow_EMEP);
        objectOutput.writeFloat(beta_radtow);
        objectOutput.writeInt(beta_radtow_EMEP);
        objectOutput.writeFloat(c_lag_radtow);
        objectOutput.writeInt(c_lag_radtow_EMEP);
        objectOutput.writeFloat(h_lag_radtow);
        objectOutput.writeInt(h_lag_radtow_EMEP);
        objectOutput.writeFloat(err_packet_radtow);
        objectOutput.writeInt(err_packet_radtow_EMEP);
        objectOutput.writeFloat(licor_t_std_radtow);
        objectOutput.writeInt(licor_t_std_radtow_EMEP);
        objectOutput.writeFloat(licor_t_av_radtow);
        objectOutput.writeInt(licor_t_av_radtow_EMEP);
        objectOutput.writeFloat(licor_p_std_radtow);
        objectOutput.writeInt(licor_p_std_radtow_EMEP);
        objectOutput.writeFloat(licor_p_av_radtow);
        objectOutput.writeInt(licor_p_av_radtow_EMEP);
        objectOutput.writeFloat(F_O3_radtow);
        objectOutput.writeInt(F_O3_radtow_EMEP);
        objectOutput.writeInt(Qc_F_O3_radtow);
        objectOutput.writeInt(Qc_F_O3_radtow_EMEP);
        objectOutput.writeFloat(std_O3_radtow);
        objectOutput.writeInt(std_O3_radtow_EMEP);
        objectOutput.writeFloat(av_O3_radtow);
        objectOutput.writeInt(av_O3_radtow_EMEP);
        objectOutput.writeFloat(O3_lag_radtow);
        objectOutput.writeInt(O3_lag_radtow_EMEP);
        objectOutput.writeFloat(NEE_radtow);
        objectOutput.writeInt(NEE_radtow_EMEP);
        objectOutput.writeInt(Qc_gapf_NEE_radtow);
        objectOutput.writeInt(Qc_gapf_NEE_radtow_EMEP);
        objectOutput.writeFloat(GPP_radtow);
        objectOutput.writeInt(GPP_radtow_EMEP);
        objectOutput.writeFloat(TER_radtow);
        objectOutput.writeInt(TER_radtow_EMEP);
    }
}
